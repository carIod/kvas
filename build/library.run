#!/bin/bash
set -e
real_path(){
	path=$(pwd | sed 's/\/build$//')
	echo "${path}/${1}"
}

REMOTE_FILE=$(real_path "debug/remote.conf")
VERSION_FILE=$(real_path "build/version")

# Получаем значение из скрытого файла конфигурации
get_remove_value()(cat < "${REMOTE_FILE}" | grep -E "^${1}=" | cut -d'=' -f2)

APP_NAME=$(get_remove_value "APP_NAME")
APPS_ROOT=$(get_remove_value "APPS_ROOT")
PORT=$(get_remove_value 'PORT')
ROUTER=$(get_remove_value 'ROUTER')

# Получаем необходимую информацию о версии пакета
get_version_part(){
	value=${1}
	cat < "${VERSION_FILE}" | grep "${value}" | cut -d'=' -f2
}
# Печатаем строку из 100  знаков равно
show_line()(printf '=%.s' {1..100} && printf '\n')

# Сохраняем данные в файл .env
write_to_env()(echo "${1}" >> .env)

ready() {
	size=$(diff_len "${1}")
	printf "%b%-${size}s%b" "${1}"
}

VERSION=$(get_version_part VERSION)
STAGE=$(get_version_part STAGE)
RELEASE=$(get_version_part RELEASE)

[ -n "${STAGE}" ] && full_version="${VERSION} ${STAGE} ${RELEASE}" || full_version="${VERSION} ${RELEASE}"


# ------------------------------------------------------------------------------------------
#
#	 Читаем Y/N/Q из ввода данных в цикле
# 	 $1 - заголовок для запроса
# 	 $2 - переменная в которой возвращается результат
#
# ------------------------------------------------------------------------------------------
read_ynq() {
	header="$(echo "${1}" | tr -d '?')"; quest="[Y/N,Q]?"
#	в случае, если встретиться слово с корнем "удал", то цвет заголовка - красный
	if echo "${header}" | grep -qiE "удал"; then
		header="${RED}${header} ${quest}${NOCL}";
	else
		if echo "${header}" | grep -qiE "[Y]"; then
			header="${BLUE}${header}${NOCL}";
		else
			header="${BLUE}${header} ${quest}${NOCL}";
		fi
	fi
	while true; do
		ready "${header}"
		read -r ynq
		case "${ynq}" in
			[Yy]* ) eval "${2}=y"; break; ;;
			[NnQq]* ) eval "${2}=n"; break; ;;
			     *) echo -e "Пожалуйста ответьте на вопрос 'Y' - да или 'N' - нет, Q - выход"
			;;
		esac
	done
}

# Получаем путь до ключа
get_key_file(){
	key_name=id_rsa
	key_path=$([ "$(whoami)" = root ] && echo '/root/.' || echo "${HOME}/.")
	key_file_pub="${key_path}ssh/${key_name}.pub"
	key_file_prv="${key_path}ssh/${key_name}"
	[ -f "${key_file_pub}" ] || ssh-keygen -t rsa -N "" -f "${key_file_prv}" &>/dev/null
	echo "${key_file_pub}"
}


# ИСПОЛНЯЕМ ВУТРИ КОНТЕЙНЕРА !!!
# Копируем публичный ключ на роутер
copy_ssh_keys_to_router(){
	# если ключи отсутствуют на NAS
	echo "Копируем ключи на роутер ${ROUTER} порт ${PORT}..."
	ssh -p "${PORT}" "${ROUTER}" "echo \"$(cat "$(get_key_file)")\" >> /opt/root/.ssh/authorized_keys"
	show_line
}

get_full_package_version(){
	if [ -n "${STAGE}" ] ; then stg="-${STAGE}"; else stg=""; fi
	if [ -n "${RELEASE}" ] ; then
		if [ -n "${STAGE}" ] ; then rel="_${RELEASE}";
		else rel=".${RELEASE}"; fi
	else rel=""; fi
	echo "${VERSION}${stg}${rel}"
}

get_package_name(){
	echo "${APP_NAME}_$(get_full_package_version)_all.ipk"
}


# ИСПОЛНЯЕМ ВУТРИ КОНТЕЙНЕРА !!!
# Производим копирование собранного пакета на роутер
kvas_install='curl -sL https://raw.githubusercontent.com/qzeleza/kvas/main/ipk/install.sh | sh'

copy_app_to_router(){

	app_pkg_tar_name=$(get_package_name)
	app_pkg_file=/apps/entware/bin/targets/mipsel-3.4/generic-glibc/packages/${app_pkg_tar_name}

# 	Проверяем есть ли ключ на роутере
	docker_key=$(cat < "$(get_key_file)")
	ssh -p "${PORT}" "${ROUTER}" 'cat /opt/root/.ssh/authorized_keys' | grep -q "${docker_key}" \
	|| copy_ssh_keys_to_router
	set -x
	echo "Загрузка и установки пакета на роутер..."
	ssh -p "${PORT}" "${ROUTER}" "${kvas_install}"
#	ssh -p "${PORT}" "${ROUTER}" '[ -d /opt/packages ] || mkdir -p /opt/packages'
#	ssh -p "${PORT}" "${ROUTER}" 'rm -f '"/opt/packages/${app_pkg_tar_name}" #&> /dev/null
#	scp -P "${PORT}" "${app_pkg_file}" "${ROUTER}:/opt/packages/${app_pkg_tar_name}"
#	scp -P "${PORT}" "${app_pkg_file}" "${ROUTER}:/opt/packages/${APP_NAME}_all.ipk"
}

# ИСПОЛНЯЕМ ВУТРИ КОНТЕЙНЕРА !!!
# Производим удаление и установку пакета
run_reinstalation_on_router(){

	ssh -p "${PORT}" "${ROUTER}" "${APP_NAME} rm full"
	ssh -p "${PORT}" "${ROUTER}" "${kvas_install}"
#	ssh -p "${PORT}" "${ROUTER}" 'opkg install /opt/packages/'"$(get_package_name)"  #<<< 2
#	ssh -p "${PORT}" "${ROUTER}" 'kvas setup'
	show_line

}

# ИСПОЛНЯЕМ ВУТРИ КОНТЕЙНЕРА !!!
# Производим тестирование пакета
run_tests(){
	echo -n "Запустить тесты? [Y/N]: "; ynq=''
	read -r ynq
	if [ "${ynq}" = y ] || [ "${ynq}" = Y ]; then
		cd "${APPS_ROOT}/${APP_NAME}/tests"
		./tests.run
	fi
	show_line
}

check_first_run(){

	# в случае первого запуска продукта и отсутствия скрытого файла конфигурации
	# запрашиваем данные у разработчика и записываем их в скрытый файл конфигурации
	if ! [ -f "${REMOTE_FILE}" ]; then
		read -r "Введите ИМЯ собираемого ПРИЛОЖЕНИЯ [app]: " app_name
		read -r "Введите ИМЯ регистрации в DOCKER HUB на латинице: " docker_hub_account
		read -r "Введите НАЗВАНИЕ ПАПКИ проекта, в которой хранятся все файлы для его сборки [opt]" path_name_to_make
		read -r "Введите IP роутера, на котором планируется тестирование пакета: " router_ip
		read -r "Введите НОМЕР SSH порта роутера [6191]: " router_port
		read -rs "Введите ПАРОЛЬ доступа к роутеру для пользователя root: " router_passwd

		remote_dir="$(dirname "${REMOTE_FILE}")"
		mkdir -p "${remote_dir}"
		cat <<EOF > "${REMOTE_FILE}"
APP_NAME=${app_name:-app}
APPS_ROOT=/apps
APP_PATH_NAME_TO_MAKE=${path_name_to_make:-opt}
IMAGE_NAME="${docker_hub_account}/${app_name}-dev-image"
CONTAINER_NAME="${app_name}_container"
PASSWD=${router_passwd}
PORT=${router_port:-6191}
ROUTER=root@${router_ip}
USER_NAME=$(whoami)
USER_GROUP=$(groups "$(whoami)" | cut -d' ' -f1)
U_ID=5001
G_ID=5001
EOF

	fi

}


# Проверка на наличие файла конфигурации
check_first_run
