#!/bin/sh
# ------------------------------------------------------------------------------------------
#
# 	ПРОЕКТ КВАС
#
# ------------------------------------------------------------------------------------------
# 	Данный файл служит основной библиотекой функций пакета КВАС
# ------------------------------------------------------------------------------------------
#	Разработчик: mail@zeleza.ru
#	Дата: 21/05/2022
#	Лицензия: Apache License 2.0
# ------------------------------------------------------------------------------------------
RED="\033[1;31m";
GREEN="\033[1;32m";
BLUE="\033[36m";
YELLOW="\033[33m";
NOCL="\033[m";
DATE_FORMAT='+%d/%m/%Y %H:%M:%S'
# ------------------------------------------------------------------------------------------
#	Вспомогательные переменные для работы скрипта
# ------------------------------------------------------------------------------------------
LENGTH=68
PROGRESS_BAR_WIDTH=$((LENGTH-5))  # progress bar length in characters
KVAS_CONF_FILE=/opt/etc/kvas.conf
ADGUARDHOME_CONFIG=/opt/etc/AdGuardHome/AdGuardHome.yaml
ADGUARDHOME_LOG=/opt/var/log/AdGuardHome.log
ADGUARDHOME_DEMON=/opt/etc/init.d/S99adguardhome
DNSMASQ_DEMON=/opt/etc/init.d/S56dnsmasq
HOME_PATH=/opt/apps/kvas
KVAS_BACKUP_PATH=/opt/etc/.kvas/backup

ADS_MAIN_SCRIPT=/opt/apps/kvas/bin/main/adblock
ADBLOCK_LIST_EXCEPTION=/opt/etc/adblock/exception.list
ADS_HOSTS_FILE=/opt/etc/adblock/ads.hosts.list
ADS_SOURCES_LIST=/opt/etc/adblock/sources.list

APP_NAME=kvas
INSTALL_LOG=/opt/tmp/kvas.install.log
UNBLOCK_LIST_FILE=/opt/etc/hosts.list
CRONTAB_FILE=/opt/etc/crontab
UPDATE_BIN_FILE=/opt/apps/kvas/bin/main/update
DNS_LOCAL_DEMON_FILE=/opt/etc/ndm/netfilter.d/100-dns-local
IPSET_REDIRECT_DEMON_FILE=/opt/etc/ndm/netfilter.d/100-proxy-redirect
HOOK_INFACE_FILE=/opt/etc/ndm/ifstatechanged.d/100-save-inface_entware
INFACE_NAMES_FILE=/opt/etc/inface_equals
SHADOWSOCKS_CONF=/opt/etc/shadowsocks.json
SHADOWSOCKS_CONF_BACKUP=${KVAS_BACKUP_PATH}/shadowsocks.json
DNSMASQ_CONFIG=/opt/etc/dnsmasq.conf
DNSCRYPT_CONFIG=/opt/etc/dnscrypt-proxy.toml
KVAS_BACKUP_LIST_FILE=/opt/etc/.kvas/backup/hosts.list
KVAS_START_FILE=/opt/etc/init.d/S96kvas
ADGUARD_IPSET_FILE=/opt/etc/AdGuardHome/kvas.ipset
DNSMASQ_IPSET_HOSTS=/opt/etc/dnsmasq.d/kvas.dnsmasq


# Файл в котором содержатся сети, запросы из которых необходимо исключить
# из обращений к VPN или SHADOWSOCKS подключениям
EXCLUDED_NET_FILE=/opt/apps/kvas/etc/conf/excluded.net

IP_FILTER='[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'
NET_FILTER='[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,3}'

ERROR_LOG_FILE=/opt/tmp/kvas.err.log
APP_NAME_DESC=КВАС

MAIN_DNS_PORT=53
LOCALHOST_IP=127.0.0.1
INFACE_REQUEST="${LOCALHOST_IP}:79/rci/show/interface"
INFACE_PART_REQUEST="${LOCALHOST_IP}:79/rci/interface"
SSR_ENTWARE_TEMPL=ezcfg

get_entware_ikev2_inface(){
#	net_inface_last=$(ip a| grep global | sed 's/.*\(eth[0-9]\{1,3\}\).*/\1/g' | sort | tail -n1)
#	echo $((net_inface_last + 1))
	echo eth3
}

get_ip_list(){
#	{1} - исследуемый домен
#	{2} - DNS сервер для опроса
    dig "${1}" @"${2}" | grep -E '[0-9.]' | grep '^'"${1}" | sed -n 's/^.*A.*\([0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\)/\1/p'
}

#
# 	Проверка хоста на то, доступен ли он через туннель или через провайдера
#	ВНИМАНИЕ! Доступна не для всех доменов
#
is_inside_tunnel(){
	host_to_check=${1}
	tunnel_dns=${2}
	provider_dns=${3:-9.9.9.9}

	[ -z "${tunnel_dns}" ] && tunnel_dns=$(get_router_ip)
	grep_cmd=""

	for _ip in $(get_ip_list "${host_to_check}" "${provider_dns}")
	do
			grep_cmd=${grep_cmd}" | grep ${_ip}"
	done
	tunn_ip_list=$(get_ip_list "${host_to_check}" "${tunnel_dns}" | tr '\n' ' ')
	grep_cmd=$(echo "echo ${tunn_ip_list} ${grep_cmd}" | sed 's/\(.*grep \)\([0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\)$/\1 -q \2/' | tr -s ' ')

	eval "! ${grep_cmd}"
}


has_ssr_enable() ([ -f "/opt/etc/ndm/netfilter.d/100-proxy-redirect" ])

# ------------------------------------------------------------------------------------------
#
#	Переподключаем основной интерфейс в случае обрыва
#
# ------------------------------------------------------------------------------------------
reset_ISP_connection() {
	# получаем текущее состояние инф-са для возвращения его к исходному состоянию
	id=$(get_defaultgw_id)
	curl -s -d '{"down":"true"}' "${INFACE_PART_REQUEST}/${id}" &> /dev/null
	sleep 3
	curl -s -d '{"up":"true"}' "${INFACE_PART_REQUEST}/${id}" &> /dev/null
}

# ------------------------------------------------------------------------------------------
#
#	Получаем список гостевых интерфейсов из файла конфигурации
#
# ------------------------------------------------------------------------------------------
get_guest_inface_list_from_config(){
	get_config_value INFACE_GUEST_ENT | tr ',' ' '
}

# ------------------------------------------------------------------------------------------
#
#	Перегружаем заданное соединение inface_cli
#
# ------------------------------------------------------------------------------------------
reset_connection() {
	inface_cli=${1}
	# получаем текущее состояние инф-са для возвращения его к исходному состоянию
	state=$(curl -s "${INFACE_REQUEST}" | jq -r '.[] | select(.id=="'"${inface_cli}"'") | .state')
	isp_state=$(curl -s "${INFACE_REQUEST}" | jq -r '.[] | select(.defaultgw==true and .global==true) | .state')
	if echo "${isp_state}" | grep -q down ; then
		reset_ISP_connection || {
			error "Проверьте соединение с провайдером и/или настройки DNS."
			exit 1
		}
	fi


	# в зависимости от состояния - включаем и выключаем или выключаем и включаем интерфейс
	# для того, чтобы сработал наш хук в файле /opt/etc/ndm/ifstatechanged.d/100-save-inface_entware
	if [ "${state}" = 'up' ]; then
		curl -s -d '{"down":"true"}' "${INFACE_PART_REQUEST}/${inface_cli}" &> /dev/null
	else
		curl -s -d '{"up":"true"}' "${INFACE_PART_REQUEST}/${inface_cli}" &> /dev/null
	fi
	sleep 3
	curl -s -d "{\"${state}\":\"true\"}" "${INFACE_PART_REQUEST}/${inface_cli}" &> /dev/null
}


pause()(read -r pause &> /dev/null)

# ------------------------------------------------------------------------------------------
#
# 		Получаем значение переменной из файла конфигурации
# 		/opt/apps/kvas/etc/conf/kvas.conf
#
# 		$1 - имя переменной
#
# ------------------------------------------------------------------------------------------
get_config_value() {
	grep "${1}=" "${KVAS_CONF_FILE}" | cut -d'=' -f2
}

APP_VERSION=$(get_config_value APP_VERSION)
APP_RELEASE=$(get_config_value APP_RELEASE)

version(){
	[ -n "${APP_RELEASE}" ] && APP_RELEASE=" ${APP_RELEASE}"
	APP_VERSION=$(echo "${APP_VERSION}" | tr '-' ' ')
	warning "Версия пакета ${APP_VERSION}${APP_RELEASE}"
}

# ------------------------------------------------------------------------------------------
#
# 		Получаем значение переменной из файла конфигурации
# 		/opt/apps/kvas/etc/conf/kvas.conf
#
# 		$1 - имя переменной
# 		$2 - значение переменной
#
# ------------------------------------------------------------------------------------------
set_config_value() {
	if grep -oq "${1}" "${KVAS_CONF_FILE}"; then
		sed -i "s/\(${1}=\).*/\1${2}/; s/^,//; s/\,/ /g;" "${KVAS_CONF_FILE}"
	else
		echo "${1}=${2}" >> "${KVAS_CONF_FILE}"
	fi
}
# ------------------------------------------------------------------------------------------
#
# 		Удаляем значение переменной из файла конфигурации
# 		/opt/apps/kvas/etc/conf/kvas.conf
#
# 		$1 - имя переменной
#
# ------------------------------------------------------------------------------------------
del_config_value() {
	sed -i "/${1}/d" "${KVAS_CONF_FILE}"
}
# ------------------------------------------------------------------------------------------
#
# 		Прогресс-бар
# 		Источник:
# 		https://stackoverflow.com/questions/238073/how-to-add-a-progress-bar-to-a-shell-script
#
# ------------------------------------------------------------------------------------------

progress_bar() {
  # Аргументы: текущее значение, максимальное значение, единица измерения (необязательно)
  value=${1}
  max=${2}
  unit=${3:-""}  # если блок не указан, не отображаем его
  [ -n "${unit}" ] && unit=" ${unit}"
  # Calculate percentage
  if [ "${max}" -lt 1 ]; then max=1; fi  # защита от деления на ноль
  percentage=$(( 100 - (max*100 - value*100) / max))

  # Меняем масштаб полосы в соответствии с шириной индикатора выполнения.
  num_bar=$(( percentage * PROGRESS_BAR_WIDTH / 100 ))

  # Рисуем прогресс-бар
  printf "[ ${GREEN}"
  for b in $(seq 1 ${num_bar}); do printf "#"; done
  for s in $(seq 1 $(( PROGRESS_BAR_WIDTH - num_bar ))); do printf " "; done
  printf "${NOCL} ] ${percentage}%% (${value}/${max}${unit})\r"
}


# ------------------------------------------------------------------------------------------
#
#	Форматирует разряды числа, разделяя их пробелом: 122 543 567
#
# ------------------------------------------------------------------------------------------

dig_frm() {
	echo "${1}" | sed ':a;s/\([^0-9.][0-9]\+\|^[0-9]\+\)\([0-9]\{3\}\)/\1\ \2/g;ta'
}


# ------------------------------------------------------------------------------------------
#
#	Получаем внешний IP роутера через который он выходит в сеть в текущий момент
#
# ------------------------------------------------------------------------------------------
get_external_ip() {
	dns=$(get_config_value DNS_STATIC_1)
	/opt/sbin/ip route get ${dns} | sed -E 's/.*src (\S+) .*/\1/;t;d'
}

# ------------------------------------------------------------------------------------------
#
#	Получаем локальный IP роутера
#
# ------------------------------------------------------------------------------------------
get_router_ip() {
	/opt/sbin/ip a | grep ": br0:" -A4 | grep 'inet ' | tr -s ' ' | cut -d' ' -f3 | cut -d'/' -f1
}
# ------------------------------------------------------------------------------------------
#
#	Получаем ID интерфейса (entware) на заданном IP адресе
#	$1 - заданный IP адрес
#
# ------------------------------------------------------------------------------------------
get_inface_by_ip() {
	local_ip="${1}"
	/opt/sbin/ip a | grep global | grep "inet ${local_ip}/" | sed 's/^.* \(.*\)$/\1/'
}
# ------------------------------------------------------------------------------------------
#
#	Получаем IP интерфейса по заданному entware интерфейсу
#	$1 - заданный entware интерфейс
#
# ------------------------------------------------------------------------------------------
get_ip_by_inface() {
	entware_inf="${1}"
	/opt/sbin/ip a | grep global | grep "${entware_inf}" | sed 's/.*inet.\(.*\)\/.*/\1/'
}

# ------------------------------------------------------------------------------------------
#
#	Получаем ID локального интерфейса
#
# ------------------------------------------------------------------------------------------
get_local_inface() {
	local_ip="$(get_router_ip)"
	/opt/sbin/ip a | grep -E "${local_ip}/[0-9]{1,2}" | sed 's/^ *//g' | grep -E -o '[^ ]+$'
}
# ------------------------------------------------------------------------------------------
#
#	Получаем протокол работы WUI роутера:
#	Возвращает HTTP:// или HTTPS://
#
# ------------------------------------------------------------------------------------------
get_router_protocol() {
	ssl=$(curl -s "localhost:79/rci/ip/http/security-level" | grep ssl | sed 's/.ssl.://' | tr -d " ")
	[ "${ssl}" = "true" ] && protocol='https://' || protocol='http://'
	echo ${protocol}
}
# ------------------------------------------------------------------------------------------
#
#	Получаем локальный порт WUI роутера
#
# ------------------------------------------------------------------------------------------
get_router_wui_port() {
	curl -s "localhost:79/rci/ip/http/port" | tr -d '" '
}
# ------------------------------------------------------------------------------------------
#
#	Получаем локальный host роутера с задействован=ным протоколом и портом
#
# ------------------------------------------------------------------------------------------
get_router_host() {
	port=$(get_router_wui_port)
	ip=$(get_router_ip)
	protocol=$(get_router_protocol)
	! [ "${port}" -eq 80 ] && ip="${ip}:${port}"
#	echo "${protocol}${ip}"
	echo "http://${ip}"
}
# ------------------------------------------------------------------------------------------
#
#	Печать текста с выравниванием по левому краю
# 	$1 - текст
#
# ------------------------------------------------------------------------------------------
left() {
  text=$(printf "%-${LENGTH}s" "${1}")
  echo -e "${text}"
}
# ------------------------------------------------------------------------------------------
#
#	Печать текста с выравниванием по центру
# 	$1 - текст
#
# ------------------------------------------------------------------------------------------
center() {
	diff=$((LENGTH-${#1}))
  	right=$((diff/2))
  	left=$((diff - right))
  	text=$(printf "%*s%s%*s\n" "${left}" "" "${1}" "${right}" "")
  	echo -e "${text}"
}

# ------------------------------------------------------------------------------------------
#
#	 Вспомогательная функция печати в лог отладки
#
# ------------------------------------------------------------------------------------------
echo_debug() {
	if [ -n "${2}" ]; then
		print_line; echo -e "${1}"; print_line
		echo -e "${2}"; printf "\n"
	fi
}
diff_len() {
	charlen=$(echo "${1}" | sed -r "s/[\]033\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g")
	charlen=${#charlen}
	echo $(( LENGTH - charlen ))
}
ready() {
	size=$(diff_len "${1}")
	printf "%b%-${size}s%b" "${1}"
}
ready_red() {
	error="${RED}${1}${NOCL}"
	size=$(diff_len "${error}")
	printf "%b%-${size}s%b" "${error}"
}
error() {
	[ -z "${2}" ] && nn='\n' || nn=''
	_error="${RED}${1}${NOCL}"
	size=$(diff_len "${_error}")
	printf "${nn}%b%-${size}s%b\n" "${_error}"
}
warning() {
	_error="${GREEN}${1}${NOCL}"
	size=$(diff_len "${_error}")
	printf "%b%-${size}s%b\n" "${_error}"
}

when_ok() {
  echo -e "${GREEN}${1}${NOCL}"
}
when_bad() {
  echo -e "${RED}${1}${NOCL}"
}
when_alert() {
  echo -e "${BLUE}${1}${NOCL}"
}
#функция перчатает заданное число раз один и тот же символ
print_line() {
	len=$((LENGTH + 15))
	printf "%${len}s\n" | tr " " "-"
}
please_repeat() {
  echo -e "Пожалуйста ответьте на вопрос ${GREEN}'Y' - да${NOCL} или ${RED}'N' - нет${NOCL}, ${BLUE}Q - выход${NOCL}"
}

# ------------------------------------------------------------------------------------------
#
#	 Вспомогательная функция очистки содержимого
#	 файлов от мусора при этом файл не заменяется
#
# ------------------------------------------------------------------------------------------
clear_file() {
  cat < "${1}" | sed 's/\(^.*\)#.*$/\1/g' | grep -v '#' | sed "/^$/d" | sed 's/^\.//g'
}
# ------------------------------------------------------------------------------------------
#	Очищаем содержимое файла сортируем и убираем дубликаты
#	и в случае наличия второго аргумента
#	отбираем строки которые начинаются на аргумент
#	при этом файл-источник не заменяется
# ------------------------------------------------------------------------------------------
clear_content() {
	if [ -f "${1}" ] && [ -n "${2}" ]; then
		clear_file "${1}" | sort -u | grep "^${2}"
	else
	  clear_file "${1}" | sort -u
	fi
}
# ------------------------------------------------------------------------------------------
#	Очищаем содержимое файла сортируем и убираем дубликаты
#	и записываем в тот же файл источник - меняем источник
# ------------------------------------------------------------------------------------------
clear_file_content() {
	content=$(clear_content "${1}")
	echo "${content}" > "${1}"
}
# ------------------------------------------------------------------------------------------
#	Считаем число строк в файле
#	и при заданном втором аргументе считаем только
#	строки которые содержат этот аргумент
# ------------------------------------------------------------------------------------------
rec_in_file() {
  if [ "${2}" ]; then
	  clear_content "${1}" | grep -c "^${2}"
	else
	  clear_content "${1}" | wc -l
	fi
}
# ------------------------------------------------------------------------------------------
#
#	 Читаем Y/N/Q из ввода данных в цикле
# 	 $1 - заголовок для запроса
# 	 $2 - переменная в которой возвращается результат
#
# ------------------------------------------------------------------------------------------
read_ynq() {
	header="$(echo "${1}" | tr -d '?')"; quest="[Y/N,Q]?"
#	в случае, если встретиться слово с корнем "удал", то цвет заголовка - красный
	if echo "${header}" | grep -qiE "удал"; then
		header="${RED}${header} ${quest}${NOCL}";
	else
		if echo "${header}" | grep -qiE "[Y]"; then
			header="${BLUE}${header}${NOCL}";
		else
			header="${BLUE}${header} ${quest}${NOCL}";
		fi
	fi
	while true; do
		ready "${header}"
		read -r ynq
		case "${ynq}" in
			[Yy]* ) eval "${2}=y"; break; ;;
			[NnQq]* ) eval "${2}=n"; break; ;;
			     *) please_repeat ;;
		esac
	done
}
# ------------------------------------------------------------------------------------------
#
#	 Читаем Y/N/Q из ввода данных в цикле
# 	 $1 - заголовок для запроса
# 	 $2 - переменная в которой возвращается результат
#	 $3 - номер пункта при окончании времени ожидания (y - по умолчанию)
# 	 $4 - время ожидания (3 сек - по умолчанию)
#
# ------------------------------------------------------------------------------------------
read_ynq_timer() {
	header="$(echo "${1}" | tr -d '?')"; quest="[Y/N,Q]?"
	default=${3:-y}; timeout=${4:-3};
#	в случае, если встретиться слово с корнем "удал", то цвет заголовка - красный
	if echo "${header}" | grep -qiE "удал"; then
		header="${RED}${header} ${quest}${NOCL}";
	else
		if echo "${header}" | grep -qiE "[Y]"; then
			header="${BLUE}${header}${NOCL}";
		else
			header="${BLUE}${header} ${quest}${NOCL}";
		fi
	fi
	while true; do
		ready "${header}"
		read -t ${timeout} -r ynq
		[ $? = 1 ] && {
			ynq="${default}"
			echo -n "${default}"; echo
		}
		case "${ynq}" in
			[YyNnQq]* ) eval "${2}=${ynq}"; break; ;;
				 *) echo -e "Пожалуйста ответьте на вопрос 'Y' - да или 'N' - нет, Q - выход"
			;;
		esac
	done
}

exit_q(){
	print_line
	error "Процедура прервана пользователем!"
}
# ------------------------------------------------------------------------------------------
#
#	 Читаем значение переменной из ввода данных в цикле
#	 $1 - заголовок для запроса
#	 $2 - переменная в которой возвращается результат
#	 $3 - тип вводимого значения
#		 digit - цифра
#		 password - пароль без показа вводимых символов
#
# ------------------------------------------------------------------------------------------
read_value() {
	header="$(echo "${1}" | tr -d '?')"
	type="${3}"

	while true; do
		ready "${BLUE}${header}${NOCL} [Q-выход]"
		if [ "${type}" = 'password' ]; then read -rs value; else read -r value; fi
		if [ -z "${value}" ]; then
				echo
				print_line
				echo -e "${RED}Данные не должны быть пустыми!"
				echo -e "${GREEN}Попробуйте ввести значение снова...${NOCL}"
				print_line
		elif echo "${value}" | grep -qiE '^Q$' ; then
				eval "${2}=q"
				break
		elif [ "${type}" = 'digit' ] && ! echo "${value}" | grep -qE '^[[:digit:]]{1,6}$'; then
				echo
				print_line
				echo -e "${RED}Введенные данные должны быть цифрами!"
				echo -e "${GREEN}Попробуйте ввести значение снова...${NOCL}"
				print_line
		elif [ "${type}" = 'password' ] && ! echo "${value}" | grep -qE '^[[:graph:]]{8,1024}$' ; then
				echo
				print_line
				echo -e "${GREEN}Пароль должен содержать минимум 8 знаков."
				echo -e "${RED}Попробуйте ввести его снова...${NOCL}"
				print_line
		else
				eval "${2}=${value}"
				break
		fi
	done
}
# ------------------------------------------------------------------------------------------
#
#	 Получаем  системное время с удаленного сервера
#	 $1 - адрес удаленного сервера
#
# ------------------------------------------------------------------------------------------
get_server_date() {
	curl --insecure --silent --max-time 5 --head "https://${1}/" \
				| grep -i ^Date: \
				| cut -d' ' -f2-
}
# ------------------------------------------------------------------------------------------
#
#	 Обновляем системное время
#
# ------------------------------------------------------------------------------------------
date_update() {
	convert_format='%a, %d %b %Y %H:%M:%S'
	show_format="+%H:%M:%S"
	ip=$(get_config_value DNS_STATIC_1)
	date -u -D "${convert_format}" -s "$(get_server_date "${ip}")" &>/dev/null
	if [ $? != 0 ]; then
		ip=$(get_config_value DNS_STATIC_2)
		date -u -D "${convert_format}" -s "$(get_server_date "${ip}")" &>/dev/null
		if [ $? = 0 ]; then
			echo "Системное время обновлено с резервного сервера:"
			when_alert "$(date "${show_format}")"
		fi
	else
		ready "Системное время обновлено с основного сервера:"
		when_alert "$(date "${show_format}")"
	fi
}

print_error(){
	error_desc="${1}"
	err_signal="ОШИБКА::"
	error_mess="$(cat < "${ERROR_LOG_FILE}")"
#           Вывод сообщения в консоль
	[ -n "${error_mess}" ] && {
		error "\n${err_signal} ${error_desc}"; print_line
		warning "${error_mess}"; print_line

#           Вывод сообщения в лог роутера
#		while read -r line || [ -n "${line}" ]; do
#			[ -z "${line}" ] && continue
#			logger -p err -t "${APP_NAME_DESC}" "${err_signal}${line}"
#		done < "${ERROR_LOG_FILE}"
	}


}
# ------------------------------------------------------------------------------------------
#
# 	Применяем только с функцией ready !!!
#	Печатаем сообщение об ошибке, если она случается и печатаем результат команды ready,
#	если все хорошо. Для той команды после которой вызывается
#	эта функция необходимо произвести вывод данных по раздельным каналам
#	в stdin и stderr: <команда> 1> /dev/null 2> "${ERROR_LOG_FILE}"
#
#	$1 - результат выполнения функции -> передаем сюда "${?}"
# 	$2 - сообщение которое отображает суть ошибки (описание ошибки)
#	$3 - сообщение статуса исполнения при положительном результате
#
# ------------------------------------------------------------------------------------------
ready_status(){

        operation_result="${1}"
        error_desc="${2}"
        ok_mess="${3:-ГОТОВО}"
        errors_only="${4:-1}"

		[ -f "${ERROR_LOG_FILE}" ] || touch "${ERROR_LOG_FILE}"
#		Печатаем ошибку, только, если ошибка была и файл с ошибками не пустой
        if [ "${operation_result}" = 1 ] || [ "$(cat < "${ERROR_LOG_FILE}" | wc -l)" -gt 0 ] ; then
			print_error "${error_desc}"
        else
        	[ "${errors_only}" = 1 ] && when_ok "${ok_mess}" || when_ok "ГОТОВО"
            rm -f "${ERROR_LOG_FILE}"
        fi
}

# ------------------------------------------------------------------------------------------
#
#	Печатаем сообщение об ошибке. Для той команды после которой вызывается
#	эта функция необходимо произвести вывод данных по раздельным каналам
#	в stdin и stderr: <команда> 1> /dev/null 2> "${ERROR_LOG_FILE}"
#
#	$1 - результат выполнения функции -> передаем сюда "${?}"
# 	$2 - сообщение которое отображает суть ошибки (описание ошибки)
#
# ------------------------------------------------------------------------------------------
when_error()(ready_status "${1}" "${2}" ERROR 0)

log_warning(){
	logger -t "${APP_NAME_DESC}" "${1}"
}
log_error(){
	logger -p err -t "${APP_NAME_DESC}" "ОШИБКА::${1}"
}
log_alert(){
	header=${2:-${APP_NAME_DESC}}
	logger -p err -t "${header}" "${1}"
}
#
# Извлекаем ссылку на скачивание пакета с github
#

get_github_latest_update_url() {
	arch=$(grep "arch" /opt/etc/entware_release | cut -f2 -d"=")
	[ "${arch}" = mipsel ] && arch=mipsle
	curl -k -f -s -S "https://api.github.com/repos/${1}/${2}/releases/latest" 2>/dev/null \
			| jq -r '.assets[] | select(.browser_download_url | contains("linux_'"${arch}"'_softfloat")) | .browser_download_url'
}

#  Получаем список гостевых интерфейсов
get_guest_inface_list(){
	ip4 a \
		| grep -E ': br[0-9]:' \
		| grep -v "$(get_local_inface):" \
		| cut -d':' -f1-2 \
		| cut -d' ' -f2\
		| tr '\n' ' '
}