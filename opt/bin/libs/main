#!/bin/sh
# ------------------------------------------------------------------------------------------
#
# 	ПРОЕКТ КВАС
#
# ------------------------------------------------------------------------------------------
# 	Данный файл служит основной библиотекой функций пакета КВАС
# ------------------------------------------------------------------------------------------
#	Разработчик: mail@zeleza.ru
#	Дата: 21/05/2022
#	Лицензия: GPL 2.0
# ------------------------------------------------------------------------------------------
RED="\033[1;31m";
GREEN="\033[1;32m";
BLUE="\033[36m";
YELLOW="\033[33m";
NOCL="\033[m";
DATE_FORMAT='+%d/%m/%Y %H:%M:%S'
# ------------------------------------------------------------------------------------------
#	Вспомогательные переменные для работы скрипта
# ------------------------------------------------------------------------------------------
LENGTH=68
PROGRESS_BAR_WIDTH=$((LENGTH-5))  # progress bar length in characters
KVAS_CONF_FILE=/opt/etc/kvas.conf
ADGUARDHOME_CONFIG=/opt/etc/AdGuardHome/AdGuardHome.yaml
ADGUARDHOME_LOG=/opt/var/log/AdGuardHome.log
ADGUARDHOME_DEMON=/opt/etc/init.d/S99adguardhome
DNSMASQ_DEMON=/opt/etc/init.d/S56dnsmasq
HOME_PATH=/opt/apps/kvas
ERROR_LOG_FILE=/opt/etc/.kvas/logs/errors.log

pause()(read -r pause &> /dev/null)

# ------------------------------------------------------------------------------------------
#
# 		Получаем значение переменной из файла конфигурации
# 		/opt/apps/kvas/etc/conf/kvas.conf
#
# 		$1 - имя переменной
#
# ------------------------------------------------------------------------------------------
get_config_value() {
	grep "${1}=" "${KVAS_CONF_FILE}" | cut -d'=' -f2
}
# ------------------------------------------------------------------------------------------
#
# 		Получаем значение переменной из файла конфигурации
# 		/opt/apps/kvas/etc/conf/kvas.conf
#
# 		$1 - имя переменной
# 		$2 - значение переменной
#
# ------------------------------------------------------------------------------------------
set_config_value() {
	if grep -oq "${1}" "${KVAS_CONF_FILE}"; then
		sed -i "s/\(${1}=\).*/\1${2}/" "${KVAS_CONF_FILE}"
	else
		echo "${1}=${2}" >> "${KVAS_CONF_FILE}"
	fi
}
# ------------------------------------------------------------------------------------------
#
# 		Удаляем значение переменной из файла конфигурации
# 		/opt/apps/kvas/etc/conf/kvas.conf
#
# 		$1 - имя переменной
#
# ------------------------------------------------------------------------------------------
del_config_value() {
	sed -i "/${1}/d" "${KVAS_CONF_FILE}"
}
# ------------------------------------------------------------------------------------------
#
# 		Прогресс-бар
# 		Источник:
# 		https://stackoverflow.com/questions/238073/how-to-add-a-progress-bar-to-a-shell-script
#
# ------------------------------------------------------------------------------------------

progress_bar() {
  # Аргументы: текущее значение, максимальное значение, единица измерения (необязательно)
  value=${1}
  max=${2}
  unit=${3:-""}  # если блок не указан, не отображаем его
  [ -n "${unit}" ] && unit=" ${unit}"
  # Calculate percentage
  if [ "${max}" -lt 1 ]; then max=1; fi  # защита от деления на ноль
  percentage=$(( 100 - (max*100 - value*100) / max))

  # Меняем масштаб полосы в соответствии с шириной индикатора выполнения.
  num_bar=$(( percentage * PROGRESS_BAR_WIDTH / 100 ))

  # Рисуем прогресс-бар
  printf "[ ${GREEN}"
  for b in $(seq 1 ${num_bar}); do printf "#"; done
  for s in $(seq 1 $(( PROGRESS_BAR_WIDTH - num_bar ))); do printf " "; done
  printf "${NOCL} ] ${percentage}%% (${value}/${max}${unit})\r"
}


# ------------------------------------------------------------------------------------------
#
#	Форматирует разряды числа, разделяя их пробелом: 122 543 567
#
# ------------------------------------------------------------------------------------------

dig_frm() {
	echo "${1}" | sed ':a;s/\([^0-9.][0-9]\+\|^[0-9]\+\)\([0-9]\{3\}\)/\1\ \2/g;ta'
}


# ------------------------------------------------------------------------------------------
#
#	Получаем внешний IP роутера через который он выходит в сеть в текущий момент
#
# ------------------------------------------------------------------------------------------
get_external_ip() {
	dns=$(get_config_value DNS_STATIC_1)
	/opt/sbin/ip route get ${dns} | sed -E 's/.*src (\S+) .*/\1/;t;d'
}

# ------------------------------------------------------------------------------------------
#
#	Получаем локальный IP роутера
#
# ------------------------------------------------------------------------------------------
get_router_ip() {
	/opt/sbin/ip a | grep ": br0:" -A4 | grep 'inet ' | tr -s ' ' | cut -d' ' -f3 | cut -d'/' -f1
}
# ------------------------------------------------------------------------------------------
#
#	Получаем ID интерфейса (entware) на заданном IP адресе
#	$1 - заданный IP адрес
#
# ------------------------------------------------------------------------------------------
get_inface_by_ip() {
	local_ip="${1}"
	/opt/sbin/ip a | grep "${local_ip}" | sed 's/^ *//g'| grep -oE '.{1,6}$' | cut -d ' ' -f2-
}
# ------------------------------------------------------------------------------------------
#
#	Получаем ID локального интерфейса
#
# ------------------------------------------------------------------------------------------
get_local_inface() {
	local_ip="$(get_router_ip)"
	/opt/sbin/ip a | grep "${local_ip}" | sed 's/^ *//g' | grep -E -o '[^ ]+$'
}
# ------------------------------------------------------------------------------------------
#
#	Получаем протокол работы WUI роутера:
#	Возвращает HTTP:// или HTTPS://
#
# ------------------------------------------------------------------------------------------
get_router_protocol() {
	ssl=$(curl -s "localhost:79/rci/ip/http/security-level" | grep ssl | sed 's/.ssl.://' | tr -d " ")
	[ "${ssl}" = "true" ] && protocol='https://' || protocol='http://'
	echo ${protocol}
}
# ------------------------------------------------------------------------------------------
#
#	Получаем локальный порт WUI роутера
#
# ------------------------------------------------------------------------------------------
get_router_wui_port() {
	curl -s "localhost:79/rci/ip/http/port" | tr -d '" '
}
# ------------------------------------------------------------------------------------------
#
#	Получаем локальный host роутера с задействован=ным протоколом и портом
#
# ------------------------------------------------------------------------------------------
get_router_host() {
	port=$(get_router_wui_port)
	ip=$(get_router_ip)
	protocol=$(get_router_protocol)
	! [ "${port}" -eq 80 ] && ip="${ip}:${port}"
	echo "${protocol}${ip}"
}
# ------------------------------------------------------------------------------------------
#
#	Печать текста с выравниванием по левому краю
# 	$1 - текст
#
# ------------------------------------------------------------------------------------------
left() {
  text=$(printf "%-${LENGTH}s" "${1}")
  echo -e "${text}"
}
# ------------------------------------------------------------------------------------------
#
#	Печать текста с выравниванием по центру
# 	$1 - текст
#
# ------------------------------------------------------------------------------------------
center() {
	diff=$((LENGTH-${#1}))
  	right=$((diff/2))
  	left=$((diff - right))
  	text=$(printf "%*s%s%*s\n" "${left}" "" "${1}" "${right}" "")
  	echo -e "${text}"
}

# ------------------------------------------------------------------------------------------
#
#	 Вспомогательная функция печати в лог отладки
#
# ------------------------------------------------------------------------------------------
echo_debug() {
	if [ -n "${2}" ]; then
		print_line; echo -e "${1}"; print_line
		echo -e "${2}"; printf "\n"
	fi
}
diff_len() {
	charlen=$(echo "${1}" | sed -r "s/[\]033\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g")
	charlen=${#charlen}
	echo $(( LENGTH - charlen ))
}
ready() {
	size=$(diff_len "${1}")
	printf "%b%-${size}s%b" "${1}"
}
ready_red() {
	error="${RED}${1}${NOCL}"
	size=$(diff_len "${error}")
	printf "%b%-${size}s%b" "${error}"
}
error() {
	_error="${RED}${1}${NOCL}"
	size=$(diff_len "${_error}")
	printf "%b%-${size}s%b\n" "${_error}"
}
warning() {
	_error="${GREEN}${1}${NOCL}"
	size=$(diff_len "${_error}")
	printf "%b%-${size}s%b\n" "${_error}"
}

when_ok() {
  echo -e "${GREEN}${1}${NOCL}"
}
when_bad() {
  echo -e "${RED}${1}${NOCL}"
}
when_alert() {
  echo -e "${BLUE}${1}${NOCL}"
}
#функция перчатает заданное число раз один и тот же символ
print_line() {
	len=$((LENGTH + 15))
	printf "%${len}s\n" | tr " " "-"
}
please_repeat() {
  echo -e "Пожалуйста ответьте на вопрос ${GREEN}'Y' - да${NOCL} или ${RED}'N' - нет${NOCL}, ${BLUE}Q - выход${NOCL}"
}

# ------------------------------------------------------------------------------------------
#
#	 Вспомогательная функция очистки содержимого
#	 файлов от мусора при этом файл не заменяется
#
# ------------------------------------------------------------------------------------------
clear_file() {
  cat < "${1}" | sed 's/\(^.*\)#.*$/\1/g' | grep -v '#' | sed "/^$/d" | sed 's/^\.//g'
}
# ------------------------------------------------------------------------------------------
#	Очищаем содержимое файла сортируем и убираем дубликаты
#	и в случае наличия второго аргумента
#	отбираем строки которые начинаются на аргумент
#	при этом файл-источник не заменяется
# ------------------------------------------------------------------------------------------
clear_content() {
	if [ -f "${1}" ] && [ -n "${2}" ]; then
		clear_file "${1}" | sort -u | grep "^${2}"
	else
	  clear_file "${1}" | sort -u
	fi
}
# ------------------------------------------------------------------------------------------
#	Очищаем содержимое файла сортируем и убираем дубликаты
#	и записываем в тот же файл источник - меняем источник
# ------------------------------------------------------------------------------------------
clear_file_content() {
	content=$(clear_content "${1}")
	echo "${content}" > "${1}"
}
# ------------------------------------------------------------------------------------------
#	Считаем число строк в файле
#	и при заданном втором аргументе считаем только
#	строки которые содержат этот аргумент
# ------------------------------------------------------------------------------------------
rec_in_file() {
  if [ "${2}" ]; then
	  clear_content "${1}" | grep -c "^${2}"
	else
	  clear_content "${1}" | wc -l
	fi
}
# ------------------------------------------------------------------------------------------
#
#	 Читаем Y/N/Q из ввода данных в цикле
# 	 $1 - заголовок для запроса
# 	 $2 - переменная в которой возвращается результат
#
# ------------------------------------------------------------------------------------------
read_ynq() {
	header="$(echo "${1}" | tr -d '?')"; quest="[Y/N,Q]?"
#	в случае, если встретиться слово с корнем "удал", то цвет заголовка - красный
	if echo "${header}" | grep -qiE "удал"; then
		header="${RED}${header} ${quest}${NOCL}";
	else
		if echo "${header}" | grep -qiE "[Y]"; then
			header="${BLUE}${header}${NOCL}";
		else
			header="${BLUE}${header} ${quest}${NOCL}";
		fi
	fi
	while true; do
		ready "${header}"
		read -r ynq
		case "${ynq}" in
			[Yy]* ) eval "${2}=y"; break; ;;
			[NnQq]* ) eval "${2}=n"; break; ;;
			     *) please_repeat ;;
		esac
	done
}

# ------------------------------------------------------------------------------------------
#
#	 Читаем значение переменной из ввода данных в цикле
#	 $1 - заголовок для запроса
#	 $2 - переменная в которой возвращается результат
#	 $3 - тип вводимого значения
#		 digit - цифра
#		 password - пароль без показа вводимых символов
#
# ------------------------------------------------------------------------------------------
read_value() {
	header="$(echo "${1}" | tr -d '?')"
	type="${3}"

	while true; do
		ready "${BLUE}${header}${NOCL} [Q-выход]"
		if [ "${type}" = 'password' ]; then read -rs value; else read -r value; fi
		if [ -z "${value}" ]; then
				echo
				print_line
				echo -e "${RED}Данные не должны быть пустыми!"
				echo -e "${GREEN}Попробуйте ввести значение снова...${NOCL}"
				print_line
		elif echo "${value}" | grep -qiE '^Q$' ; then
				eval "${2}=q"
				break
		elif [ "${type}" = 'digit' ] && ! echo "${value}" | grep -qE '^[[:digit:]]{1,6}$'; then
				echo
				print_line
				echo -e "${RED}Введенные данные должны быть цифрами!"
				echo -e "${GREEN}Попробуйте ввести значение снова...${NOCL}"
				print_line
		elif [ "${type}" = 'password' ] && ! echo "${value}" | grep -qE '^[[:graph:]]{8,1024}$' ; then
				echo
				print_line
				echo -e "${GREEN}Пароль должен содержать минимум 8 знаков."
				echo -e "${RED}Попробуйте ввести его снова...${NOCL}"
				print_line
		else
				eval "${2}=${value}"
				break
		fi
	done
}
# ------------------------------------------------------------------------------------------
#
#	 Получаем  системное время с удаленного сервера
#	 $1 - адрес удаленного сервера
#
# ------------------------------------------------------------------------------------------
get_server_date() {
	curl --insecure --silent --max-time 5 --head "https://${1}/" \
				| grep -i ^Date: \
				| cut -d' ' -f2-
}
# ------------------------------------------------------------------------------------------
#
#	 Обновляем системное время
#
# ------------------------------------------------------------------------------------------
date_update() {
	convert_format='%a, %d %b %Y %H:%M:%S'
	show_format="+%H:%M:%S"
	ip=$(get_config_value DNS_STATIC_1)
	date -u -D "${convert_format}" -s "$(get_server_date "${ip}")" &>/dev/null
	if [ $? != 0 ]; then
		ip=$(get_config_value DNS_STATIC_2)
		date -u -D "${convert_format}" -s "$(get_server_date "${ip}")" &>/dev/null
		if [ $? = 0 ]; then
			echo "Системное время обновлено с резервного сервера:"
			when_alert "$(date "${show_format}")"
		fi
	else
		ready "Системное время обновлено с основного сервера:"
		when_alert "$(date "${show_format}")"
	fi
}

# ------------------------------------------------------------------------------------------
#
#	Печатаем сообщение в зависимости от результата
#	содержания переданного статуса 0 - все Ок, 1 - Ошибка
#
#	$1 - статус результата выполнения функции
# 	$2 - сообщение в случае когда все прошло удачно
# 	$3 - сообщение для случая обнаружения ошибки
# 	$4 - имя файла в который пишем лог, в случае отсутствия пишем в ERROR_LOG_FILE
#
# ------------------------------------------------------------------------------------------
show_result_status() {

	status_result="${1}"; ok_mess="${2}";
	error_mess="${3}"; log_file="${4:-${ERROR_LOG_FILE}}"

#	В случае, если отсутствует лог файл, то создаем его
	[ -f "${log_file}" ] || {
		mkdir -p "$(echo "${log_file}" | sed 's/\(.*\)\/.*$/\1/')"
		touch "${log_file}"
	}
	if [ "${status_result}" = 0 ]; then
		when_ok "${ok_mess}"
	else
		when_bad "ОШИБКА"
		{
			print_line
			echo "[$(date "${DATE_FORMAT}")]: ${error_mess}"
		} >> "${log_file}"
		print_line
		error "${error_mess}"
		exit 1
	fi

}