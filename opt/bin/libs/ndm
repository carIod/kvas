#!/bin/sh
#------------------------------------------------------------------------------
#	ПАКЕТ КВАС
#------------------------------------------------------------------------------
#
#	Данный файл служит библиотекой переменных среды и функций,
#	которые используются в событийном пакете ndm
#	https://github.com/ndmsystems/packages/wiki/Opkg-Component
#
# ------------------------------------------------------------------------------
#	Разработчик: mail@zeleza.ru
#	Дата создания: 13/09/2022
#	Лицензия: Apache License 2.0
# ------------------------------------------------------------------------------------------

# ------------------------------------------------------------------------------------------
# Подключаем функции логирования

# shellcheck source=opt\bin\libs\route
. /opt/apps/kvas/bin/libs/route

# ------------------------------------------------------------------------------------------

# имя таблицы для ipset

ROUTE_TABLE_ID=1001
MARK_NUM=0xd1000
DNS_PORT=53

# общее начало названий всех пользовательских цепочек 
START_CHAIN="_KVS_"

# Метка VPN цепочки для правил iptables
VPN_IPTABLES_CHAIN="${START_CHAIN}VPN_MARK"
# Метка SHADOWSOCKS цепочки для правил iptables
PROXY_IPTABLES_CHAIN="${START_CHAIN}PROXY_REDIR"


IPv4='IPv4::'
IPv6='IPv6::'



ip4() {	/opt/sbin/ip -4 "$@"; }
ip4tables() {
	if ! /opt/sbin/iptables -C "$@" &>/dev/null; then
		/opt/sbin/iptables -A "$@"
	fi
}
iptab() { /opt/sbin/iptables "$@"; }
iptab_save() { /opt/sbin/iptables-save "$@"; }
ip4save() {
	/opt/sbin/iptables-save | grep -vE '\-A _'
}
get_gw4()([ "${1}" ] && ip addr show "${1}" | grep -Po "(?<=inet ).*(?=/)")



#как пример гостевая сеть br3, которой необходимо обеспечить доступ к VPN
#inface_cli()(get_config_value "INFACE_CLI")
inface_ent() { get_config_value "INFACE_ENT"; }
inface_gw4()(get_gw4 "$(inface_ent)")

inface_guest_gw4()(get_gw4 "${1}")
guest_net()(echo "$(inface_guest_gw4 "${1}" | cut -d'.' -f1-3).0/24")

# ------------------------------------------------------------------------------------------
# проверка на доступность программного и аппаратного ускорения
# ------------------------------------------------------------------------------------------
#fastnet_support()(curl -s localhost:79/rci/show/version | grep -q ppe)
#version_os()(ndmc -c show version | grep version | head -1 | cut -d: -f2| tr -d ' ')
#is_os_4()([[ "$(version_os)" =~ 4.* ]])
#fast_hw_enabled()(is_os_4 && ask=enable || ask=false; ! curl -s localhost:79/rci/show/rc/ppe | grep hardware -C1 | grep -q ${ask})
#fast_sw_enabled()(is_os_4 && ask=enable || ask=false; ! curl -s localhost:79/rci/show/rc/ppe | grep software -C1 | grep -q ${ask})
fastnet_enabled() {	return 0; }

#fastnet_enabled()(fast_hw_enabled || fast_sw_enabled)

# удаление всех пользовательских правил во всей iptables
cleanup_all_user_rules() {
    local rc=0 table rule rule_del chain rules

    for table in filter nat mangle; do
        rules=$(iptab_save -t "$table" 2>/dev/null) || continue

        # Удаляем переходы в цепочки
        while read -r rule; do
            rule_del=$(echo "$rule" | sed 's/^-A /-D /')
            if ! iptab -t "$table" $rule_del 2>/dev/null; then
                rc=1
                #echo "Ошибка удаления: $rule_del" >&2
            fi
        done <<EOF
$(echo "$rules" | grep -- "-j ${START_CHAIN}")
EOF

        # Удаляем сами цепочки
        while read -r chain; do
            if ! iptab -t "$table" -F "$chain" 2>/dev/null; then
                rc=1
                #echo "Ошибка очистки цепочки: $chain" >&2
            fi
            if ! iptab -t "$table" -X "$chain" 2>/dev/null; then
                rc=1
                #echo "Ошибка удаления цепочки: $chain" >&2
            fi
        done <<EOF
$(echo "$rules" | awk -v chain="$START_CHAIN" -F '[: ]' '$1 == ":"chain {print $2}')
EOF
    done

    return $rc
}


# ------------------------------------------------------------------------------------------
#
#	Чистим и заполняем таблицу правил iptables для vpn подключений
#
# ------------------------------------------------------------------------------------------
cmd_vpn_iptable_reset() {
	if has_vpn_enable; then # если режим VPN активен
		ready "Переустановка iptables для vpn завершена"
		cmd_vpn_iptable_flush  &> /dev/null

		ip4_add_route_table &> /dev/null
	#	Устанавливаем приоритет таблицы
		ip4_rule_set_priority &> /dev/null
	#	Создаем правила iptables
		ip4_vpn_insert_firewall &> /dev/null

		[ $? = 0 ] && when_ok "УСПЕШНО" || when_bad "C ОШИБКАМИ"
	else
		warning "VPN режим не активирован! выполните kvas vpn set"
	fi
}

# ------------------------------------------------------------------------------------------
#
#	Чистим таблицу правил iptables для vpn подключений
#
# ------------------------------------------------------------------------------------------
cmd_vpn_iptable_flush() {
	ready "Очистка iptables для vpn завершена"
	ip4_firewall_flush_vpn_rules && when_ok "УСПЕШНО" || when_bad "C ОШИБКАМИ"
}


del_all_net_from_config(){
        sed -i 's/\(INFACE_GUEST_ENT=\).*/\1/; s/[ ,]//g' "${KVAS_CONF_FILE}"
}

del_ikev2_net_from_config(){
		has_guest_nets=$(cat <  "${KVAS_CONF_FILE}" | sed -n 's/INFACE_GUEST_ENT=\(.*\)/\1/p;'| sed 's/[ ,]//g')
        [ -n "${has_guest_nets}" ] && point=',' || point=''
        sed -i '/INFACE_GUEST_ENT=/,/^$/ s/ikev2[,]\{0,1\}//; s/[ ]//g' "${KVAS_CONF_FILE}"
}
add_ikev2_net_to_config(){
        has_guest_nets=$(cat <  "${KVAS_CONF_FILE}" | sed -n 's/INFACE_GUEST_ENT=\(.*\)/\1/p;'| sed 's/[ ]//g')
        [ -n "${has_guest_nets}" ] && point=',' || point=''
        del_ikev2_net_from_config
        sed -i "s/\(INFACE_GUEST_ENT=.*\)/\1${point}ikev2/g; s/[ ]//g" "${KVAS_CONF_FILE}"
}

# ------------------------------------------------------------------------------------------
# Правило ищет весь идущий трафик в сети на порт 53, и перенаправляет на локальный порт
# ------------------------------------------------------------------------------------------
# Должен вызываться только с мест где есть уверенность что правила пользователя очищены
ip4_firewall_nat_dns_redirect(){
	dns_redirect=$(get_config_value DNS_REDIRECT)
	[ "$dns_redirect" != "true" ] && return 0
	chain="${START_CHAIN}DNS_REDIR"
	iptab -t nat -N "${chain}" &>/dev/null
	log_warning "Подключаем правило редиректа DNS на локальный порт"
	iptab -t nat -A "${chain}"  -j REDIRECT --to-port "${DNS_PORT}" &>/dev/null || return 1
	iptab -t nat -A PREROUTING  -p udp --dport "${DNS_PORT}" -j "${chain}" &>/dev/null || return 1
}


# ------------------------------------------------------------------------------------------
# Подключаем Firewall правила, которые исключают из работы локальные запросы
# ------------------------------------------------------------------------------------------
ip4_firewall_exclude_locals(){
	chain_name=${1}; table=${2};
#	Если не заданы аргументы, то ничего не выполняем
	if [ -n "${chain_name}" ] && [ -n "${table}" ]; then
		while read -r _net || [ -n "${_net}" ]; do
			[ -z "${_net}" ] && continue
			#  пропускаем строки с комментариями
			[ ${_net:0:1} = '#' ] && continue
			# удаляем из строк комментарии - все что встречается после символа # и сам символ
			_net=$(echo "${_net}" | sed 's/#.*$//g' | tr -s ' ' )
			iptab -t "${table}" -A "${chain_name}" -d "${_net}" -j RETURN &>/dev/null

		done < "${EXCLUDED_NET_FILE}"
	else
		log_error "При вызове ip4_firewall_exclude_locals не были заданы обязательные аргументы."
	fi
}


# ------------------------------------------------------------------------------------------
# Маркируем VPN подключения, когда программное и аппаратное ускорение ПОДКЛЮЧЕНО
# ------------------------------------------------------------------------------------------
#TODO подумать над переходом на iptables-restore --noflush
ip4_vpn_insert_mangle(){
	{
		log_warning "Маркируем VPN подключения, когда программное и аппаратное ускорение ПОДКЛЮЧЕНО"

		if ! iptab -t mangle -L "${VPN_IPTABLES_CHAIN}" -n &>/dev/null; then
			iptab -N "${VPN_IPTABLES_CHAIN}" -t mangle &>/dev/null
	
			iptab -A "${VPN_IPTABLES_CHAIN}" -t mangle -m set ! --match-set "${IPSET_TABLE_NAME}" dst -j RETURN &>/dev/null

			# Игнорируем локальные сети и любые другие адреса, которые вы хотели бы обойти прокси
			ip4_firewall_exclude_locals "${VPN_IPTABLES_CHAIN}" mangle  &>/dev/null

			iptab -A "${VPN_IPTABLES_CHAIN}" -t mangle -j CONNMARK --restore-mark --mask "${MARK_NUM}" &>/dev/null
			iptab -A "${VPN_IPTABLES_CHAIN}" -t mangle -m mark --mark "${MARK_NUM}"/"${MARK_NUM}" -j RETURN &>/dev/null
			iptab -A "${VPN_IPTABLES_CHAIN}" -t mangle -m conntrack --ctstate NEW -j MARK --set-mark "${MARK_NUM}"/"${MARK_NUM}" &>/dev/null
			iptab -A "${VPN_IPTABLES_CHAIN}" -t mangle -m mark ! --mark 0xd1000/0xd1000 -j DROP
			iptab -A "${VPN_IPTABLES_CHAIN}" -t mangle -j CONNMARK --save-mark --mask "${MARK_NUM}" &>/dev/null

			iptab -A PREROUTING -t mangle -m set --match-set "${IPSET_TABLE_NAME}" dst -j "${VPN_IPTABLES_CHAIN}" &>/dev/null
			iptab -A OUTPUT     -t mangle -m set --match-set "${IPSET_TABLE_NAME}" dst -j "${VPN_IPTABLES_CHAIN}" &>/dev/null

			cli_inface="$(get_config_value INFACE_CLI)"
			if [ "$cli_inface" = "manual" ]; then
				inface_entware="$(get_config_value INFACE_ENT)"
				chain="${START_CHAIN}MTU"
				# так как интерфейс создан вручную то добавляем правила для корекции MTU при пересылке
				iptab -t mangle -N "${chain}" &>/dev/null
				iptab -t mangle -A "${chain}" -j TCPMSS --clamp-mss-to-pmtu &>/dev/null
				
				iptab -t mangle -A FORWARD -i "${inface_entware}" -p tcp -m tcp --tcp-flags SYN,RST SYN -j "${chain}" &>/dev/null
				iptab -t mangle -A FORWARD -o "${inface_entware}" -p tcp -m tcp --tcp-flags SYN,RST SYN -j "${chain}" &>/dev/null
			fi	

		fi	

	} &>/dev/null || error "[${FUNCNAME}] Во время маркировки трафика для VPN соединений возникли ошибки."
#	fi
}


# ------------------------------------------------------------------------------------------
#
# 	Маркировка VPN подключений когда программное и аппаратное ускорение ОТКЛЮЧЕНО
#
# ------------------------------------------------------------------------------------------
# ip4_firewall_mark_rules_tcp_udp_on(){


# #	if [ -z "${rules}" ] ; then
# 	{
# 		log_warning "Маркировка VPN подключений когда программное и аппаратное ускорение ОТКЛЮЧЕНО."
# 		# Исключаем маркировку трафика для гостевой (в том числе) сети
# 		_inface_ent=$(inface_ent)
# 		ip4tables PREROUTING -t mangle -i "${_inface_ent}" -m set --match-set ${IPSET_TABLE_NAME} dst -j MARK --set-mark ${MARK_NUM}

# 	}  &>/dev/null || error "[${FUNCNAME}] Возникла ошибка при маркировке трафика гостевой сети для tcp или udp."
# #	fi
# }


# ------------------------------------------------------------------------------------------
#
# 	Правила маркировки гостевого трафика
#
# ------------------------------------------------------------------------------------------
get_guest_net(){
	ip -4 -o addr show "$1" scope global | awk '{print $4; exit}'
}

ip4_vpn_insert_nat(){
	chain="${START_CHAIN}VPN_MASQ"
    table=nat
	{
	    if ! iptab -t nat -L "${chain}" -n &>/dev/null; then
			# если цепочки нет значит все правила в таблице ${table} уничтожены и нужно пересоздать
        	iptab -t nat -N "${chain}" &>/dev/null
#			Если есть гостевые сети то добавляем их			

			#TODO Что то тут напутано у разработчика, маскарадинг стоит на интерфейсе гостя, зачем. Пока закоментировал
			#for guest_inface in $(get_guest_inface_list_from_config)
        	#do
        	#	iptab -t nat -A "${chain}" -s "$(get_guest_net "${guest_inface}")" -o "${guest_inface}" -j MASQUERADE &>/dev/null
			#done
			cli_inface="$(get_config_value INFACE_CLI)"
			if [ "$cli_inface" = "manual" ]; then
				inface_entware="$(get_config_value INFACE_ENT)"
				iptab -t nat -A "${chain}" -o "${inface_entware}" -j MASQUERADE &>/dev/null

				log_warning "Подключаем правила маскарадинга на выходной интерфейс ${inface_entware}"
				iptab -t nat -A POSTROUTING -j "${chain}"
			fi

			ip4_firewall_nat_dns_redirect
    	fi

	} &>/dev/null || error "[${FUNCNAME}] Возникла ошибка при добавление правил в таблицу ${table}  для VPN."
}


# ------------------------------------------------------------------------------------------
#
# 	Правила маркировки гостевого трафика
#
# ------------------------------------------------------------------------------------------
ip4_add_selected_guest_to_ssr_network() {
	net_inface=${1}
	net_pool=${2}

	[ -z "${net_inface}" ] && {
		error "[${FUNCNAME}] Отсутствует обязательный параметр сетевой интерфейс."
		exit 1
	}

	if [ "${net_inface}" = ikev2 ] ; then
		net_inface=$(get_entware_ikev2_inface)

		[ -z "${net_pool}" ] && {
			ikev2_settings=$(curl -s "${LOCALHOST_IP}:79/rci/crypto/virtual-ip-server-ikev2")
			pool_start=$(echo "${ikev2_settings}" | grep pool-start | cut -d':' -f2 | sed 's/[\,\" ]//g;')
			net_pool=$(echo "${pool_start}" | sed 's/\.[0-9]\{1,3\}$/.0\/24/')
		}

		net_filter=" -s ${net_pool}"
	else
		net_filter=""
	fi

	port=$(get_config_value PROXY_PORT)
	log_warning "Подключаем правила маркировки гостевого трафика ${net_inface} для SHADOWSOCKS."
	iptab -t nat -A PREROUTING -i "${net_inface}" "${net_filter}" -m set --match-set ${IPSET_TABLE_NAME} dst -j "${PROXY_IPTABLES_CHAIN}"

}

# ------------------------------------------------------------------------------------------
#
# 	Установка правил для VPN подключений в зависимости от флагов
#
# ------------------------------------------------------------------------------------------
ip4_vpn_insert_filter(){

	chain="${START_CHAIN}FORWARD"
    table=filter
	{
	    if ! iptab -t "${table}" -L "${chain}" -n &>/dev/null; then
			# если цепочки нет значит все правила в таблице ${table} уничтожены и нужно пересоздать
        	iptab -t "${table}" -N "${chain}" &>/dev/null

			cli_inface="$(get_config_value INFACE_CLI)"
			if [ "$cli_inface" = "manual" ]; then
				inface_entware="$(get_config_value INFACE_ENT)"

				iptab -t "${table}" -A "${chain}" -i "${inface_entware}" \
  					-m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT	

				iptab -t "${table}" -A "${chain}" -o "${inface_entware}" -m mark --mark "${MARK_NUM}/"${MARK_NUM}"" \
  					-m conntrack --ctstate NEW,ESTABLISHED,RELATED -j ACCEPT

				log_warning "Подключаем правила разрешения пересылки маркированного трафика в ${inface_entware}"
				# пока что других правил обязательных нет для фильтра в vpn подключении поэтому переход в цепочку сделаю внутри проверки на manual
				iptab -t "${table}" -A FORWARD -j "${chain}"
			fi
    	fi

	} &>/dev/null || error "[${FUNCNAME}] Возникла ошибка при добавление правил в таблицу ${table}  для VPN."
}


ip4_vpn_insert_firewall(){
	ip4_vpn_insert_mangle &>/dev/null
	ip4_vpn_insert_nat &>/dev/null
	ip4_vpn_insert_filter &>/dev/null
}

# ------------------------------------------------------------------------------------------
#
# 	Установка правил для SHADOWSOCKS подключений
#
# Источник:
	# https://github.com/shadowsocks/shadowsocks-libev/blob/master/doc/ss-redir.asciidoc?ysclid=l949tgrsfn795375643
	# Создаем новую цепочку SHADOWSOCKS
# ------------------------------------------------------------------------------------------
#TODO Мне тут говорят что нужно "mode": "tcp_and_udp" чтобы сервер принимал udp трафик
#Для UDP в ss-redir требуется поддержка TPROXY или REDIRECT в iptables, а также соответствующие правила для перенаправления UDP-трафика:
#ip rule add fwmark 1 lookup 100
#ip route add local default dev lo table 100
#iptables -t mangle -A PREROUTING -p udp -j TPROXY --on-port 1181 --tproxy-mark 0x1/0x1
#KeeneticOS может не поддерживать TPROXY для UDP из коробки, так как это требует дополнительных модулей ядра. 
#Проверить, установлен ли модуль TPROXY в прошивке (opkg list | grep tproxy).

ip4_proxy_insert_nat(){
	interface=$(get_local_inface)
	proxy_port=$(get_config_value PROXY_PORT)

	{
		# Создаём цепочку, если её нет
		if ! iptab -t nat -L "${PROXY_IPTABLES_CHAIN}" -n &>/dev/null; then
			log_warning "Подключаем правила для SHADOWSOCKS интерфейса ${interface} порт ${proxy_port}."
			iptab -N "${PROXY_IPTABLES_CHAIN}" -t nat &>/dev/null
			# Исключаем локалки
			ip4_firewall_exclude_locals "${PROXY_IPTABLES_CHAIN}" nat
			# Не проксируем сам SSR-сервер
			local ssr_ip
			ssr_ip=$(grep '"server":' /opt/etc/shadowsocks.json | tr -d '" ,' | cut -d':' -f2)
			iptab -t nat -A "${PROXY_IPTABLES_CHAIN}" -d "${ssr_ip}" -j RETURN
			# Основные правила перенаправления
			for proto in tcp udp; do
				iptab -t nat -A "${PROXY_IPTABLES_CHAIN}" -p "${proto}" -j REDIRECT --to-port "${proxy_port}"
			done
			# Добавляем переход из PREROUTING в {PROXY_IPTABLES_CHAIN}
			iptab -t nat -A PREROUTING -i "${interface}" -m set --match-set "${IPSET_TABLE_NAME}" dst -j "${PROXY_IPTABLES_CHAIN}"
			
			# если есть гостевые сети
        	for guest_inface in $(get_guest_inface_list_from_config)
        	do
				ip4_add_selected_guest_to_ssr_network "${guest_inface}"
			done
			ip4_firewall_nat_dns_redirect
		fi	

	} &>/dev/null || error "[${FUNCNAME}] Возникла ошибка при установке правил iptable для PROXY подключения"
}

# ------------------------------------------------------------------------------------------
#
# 	Установка правил для любых типов подключений (SHADOWSOCKS или VPN)
#
# ------------------------------------------------------------------------------------------
ip4_firewall_set_all_rules(){

#   Если активно VPN соединение
	if has_ssr_enable; then
#		Если активно SHADOWSOCKS соединение
		ip4_proxy_insert_nat &>/dev/null
	else
		ip4_vpn_insert_firewall &>/dev/null
	fi

}



ip4tbl_purge_chain_all() {
	local table="${1}"
	local chain="${2}"

	[ -z "${table}" ] || [ -z "${chain}" ] && {
		log_error "Не заданы обязательные аргументы для ${FUNCNAME}"
		return 1
	}

	log_error "[${FUNCNAME}] Эта функция не должна вызыываться  '${chain}' в таблице '${table}'"
	#TODO Ошибка в скрипте, и вообще нужно подумать и убрать это скрипт есть рабочая функция удаляет все правила
	
	# # Получаем текущие правила
	# local rules
	# rules=$(ip4save | awk -v tbl="-t ${table}" -v ch="${chain}" '
	# 	$0 ~ "^-A " && $0 ~ ch {
	# 		sub(/^-A /, ""); chain = $1; sub(/^-A [^ ]+ /, ""); print chain "|" $0
	# 	}')

	# # Удаляем каждое правило
	# while IFS="|" read -r rule_chain rule_body; do
	# 	[ -n "${rule_chain}" ] && [ -n "${rule_body}" ] && {
	# 		log_warning "Удаляем правило в цепочке ${rule_chain}: ${rule_body}"
	# 		iptab -t "${table}" -D "${rule_chain}" ${rule_body} &>/dev/null
	# 	}
	# done <<< "${rules}"

	# # Очищаем и удаляем саму цепочку
	# iptab -F "${chain}" -t "${table}" &>/dev/null
	# iptab -X "${chain}" -t "${table}" &>/dev/null
}


# ------------------------------------------------------------------------------------------
# 	Производим удаление правил и удаляем саму цепочку
# ------------------------------------------------------------------------------------------
ip4tbl_flush_rm_chain(){
	table="${1}"; chain="${2}"
	#	Если не заданы аргументы, то ничего не выполняем
	if [ -n "${table}" ] && [ -n "${chain}" ] ; then
		ip4save | grep -q "${chain}" && {
			log_warning "Производим удаление правил в таблице ${table} и цепочке ${route} и удаляем цепочку."
			{
				iptab -F "${chain}" -t "${table}"
				iptab -X "${chain}" -t "${table}"
			} &>/dev/null #|| error "[${FUNCNAME}] Ошибка при удалении правил в таблице ${table} и цепочке ${route}."
		}
	else
		log_error "При вызове ${FUNCNAME} не были заданы обязательные аргументы."
	fi
}


# ------------------------------------------------------------------------------------------
# Производим удаление правил в указанной таблице в одной из стандартных цепочек
# Для того, чтобы происходило удаление правил по правилу с '! -p icmp',
# необходимо четвертым аргументом передать icmp_arg равным icmp
# ------------------------------------------------------------------------------------------
ip4tbl_flush_rm_pre_out(){

	table="${1}"; chain="${2}"; route="${3}"; icmp_arg=${4:-'no'}
	if [ -n "${table}" ] && [ -n "${chain}" ] && [ -n "${route}" ] ; then
		log_warning "Производим удаление стандартных правил в таблице ${table}, цепочке ${route} для ${chain}"
#		ip4save | grep "${route}" | grep -q "${chain}" && iptab -t "${table}" -D "${route}" -j "${chain}" &>/dev/null
		for prot in tcp udp icmp; do
			ip4save | grep "${route}" | grep "${chain}" | grep -q "${prot}" && {
				if [ "${icmp_arg}" = 'icmp' ] && [ "${prot}" = icmp ]; then
					iptab -t "${table}" -D "${route}" ! -p "${prot}" -j "${chain}" &>/dev/null
				else
					iptab -t "${table}" -D "${route}" -p "${prot}" -j "${chain}" &>/dev/null
				fi
			}
		done
	else
		log_error "При вызове ${FUNCNAME} не были заданы обязательные аргументы."
	fi
}

# ------------------------------------------------------------------------------------------
# Производим удаление правил в указанной таблице в одной из стандартных цепочек
# c правилами содержащими '-m set --match-set ${IPSET_TABLE_NAME} dst'
# ------------------------------------------------------------------------------------------
ip4tbl_flush_rm_match_set(){

	table="${1}"; chain="${2}"; route="${3}"; interface=${4}; proxy_port=${5}
	if [ -n "${table}" ] && [ -n "${chain}" ] && [ -n "${route}" ] ; then
		log_warning "Производим удаление правил match-set в таблице ${table}, цепочке ${route} для ${chain}"

		for prot in tcp udp; do
		ip4save | grep "${route}" | grep "${chain}" | grep -q "${prot}" && {
#		ip4save | grep "${route}" | grep -q "${chain}" && {
			if [ -n "${interface}" ] && [ -n "${proxy_port}" ] ; then
#					Для shadowsocks
				iptab -t "${table}" -i "${interface}" -D "${route}" -p "${prot}" -m set --match-set ${IPSET_TABLE_NAME} dst -j "${chain}" --to-port "${proxy_port}" &>/dev/null
				iptab -t "${table}" -i "${interface}" -D "${route}" -p "${prot}" -m set --match-set ${IPSET_TABLE_NAME} dst -j "${chain}" --to-port "${proxy_port}" &>/dev/null
			else
#					Для VPN
#				iptab -t "${table}" -D "${route}" -p "${prot}" -m set --match-set ${IPSET_TABLE_NAME} dst -j "${chain}" &>/dev/null
				iptab -t "${table}" -D "${route}" -m set --match-set ${IPSET_TABLE_NAME} dst -j "${chain}" &>/dev/null
			fi
		}
		done
	else
		log_error "При вызове ${FUNCNAME} не были заданы обязательные аргументы."
	fi
}

# ------------------------------------------------------------------------------------------
#
# Удаляем VPN правила для случая когда программное и аппаратное ускорение ПОДКЛЮЧЕНО
#
# ------------------------------------------------------------------------------------------
ip4_firewall_fastnet_vpn_prune(){

	ip4tbl_purge_chain_all mangle "${VPN_IPTABLES_CHAIN}"

	# table=mangle; chain="${VPN_IPTABLES_CHAIN}"
	# {
	# 	ip4tbl_flush_rm_match_set "${table}" "${chain}" PREROUTING
	# 	ip4tbl_flush_rm_match_set "${table}" "${chain}" OUTPUT
	# 	ip4tbl_flush_rm_chain "${table}" "${chain}"

	# } &>/dev/null
#	2> "${ERROR_LOG_FILE}"
#	when_error "${?}" "${IPv4} Возникла ошибка при обнулении VPN правил iptables для цепочки ${table}."
}




# ------------------------------------------------------------------------------------------
#
# Удаляем все правила iptables для SHADOWSOCKS подключений,
# которые были добавлены при работе пакета в старой редакции
#
# ------------------------------------------------------------------------------------------
ip4_firewall_ssr_prune(){
	{
		ip4tbl_flush_rm_pre_out nat "${PROXY_IPTABLES_CHAIN}" PREROUTING
		ip4tbl_flush_rm_chain nat "${PROXY_IPTABLES_CHAIN}"

		interface=$(get_local_inface)
		proxy_port=$(get_config_value PROXY_PORT)

		ip4tbl_flush_rm_match_set nat REDIRECT PREROUTING "${interface}" "${proxy_port}"
	} &>/dev/null
}


ikev2_net_access_del(){

	ikev2=$(curl -s "${LOCALHOST_IP}:79/rci/crypto/virtual-ip-server-ikev2")
	net_pool=$(echo "${ikev2}" | grep pool-start | cut -d':' -f2 | sed 's/[\,\" ]//g;')

	ikev2_setup "${ikev2}"

	ready "Удаление интерфейса \"VPN-сервер IKEv2\" завершено" && {

		net_ip=$(echo "${net_pool}" | sed 's/\.[0-9]\{1,3\}$/.1/')
		net_pool=$(echo "${net_pool}" | sed 's/\.[0-9]\{1,3\}$/.0\/24/')
		ikev2_inface=$(get_entware_ikev2_inface)

		if has_ssr_enable ;then

		   port=$(get_config_value PROXY_PORT)

		   if iptab_save | grep PREROUTING | grep "${net_pool}" | grep "${ikev2_inface}" | grep ${IPSET_TABLE_NAME} | grep REDIRECT | grep -q "${port}" ; then

				iptab -D PREROUTING -t nat -s ${net_pool} -p tcp -i ${ikev2_inface} -m set --match-set ${IPSET_TABLE_NAME} dst -j REDIRECT --to-port ${port}
				iptab -D PREROUTING -t nat -s ${net_pool} -p udp -i ${ikev2_inface} -m set --match-set ${IPSET_TABLE_NAME} dst -j REDIRECT --to-port ${port}

		   fi
		else
			if iptab_save | grep POSTROUTING | grep "${net_pool}" | grep "${ikev2_inface}" | grep -q MASQUERADE ; then
				   iptab -D POSTROUTING -t nat -s "${net_pool}" -o "${ikev2_inface}" -j MASQUERADE
			fi
		fi
		[ -z "${1}" ] && del_ikev2_net_from_config

	} && when_alert "УСПЕШНО" || when_bad "С ОШИБКОЙ"

}


ikev2_setup(){

	ikev2_data="${1}"; enable=${2:-true}

	ikev2_dns=$(get_router_ip)
	dns_server=$(echo "${ikev2_data}" | grep dns-server | cut -d':' -f2 | sed 's/[\,\" ]//g;')
	enable=$(echo "${ikev2_data}" | grep enable | cut -d':' -f2 | sed 's/[\,\" ]//g;')
	nat=$(echo "${ikev2_data}" | grep nat | cut -d':' -f2 | sed 's/[\,\" ]//g;')

	if [ "${dns_server}" != "${ikev2_dns}" ] || [ "${enable}" != true ] || [ "${nat}" != true ] ;then
	#	Если DNS отличен от IP роутера или интерфейс отключен
        pool_size=$(echo "${ikev2_data}" | grep pool-size | cut -d':' -f2 | sed 's/[\,\" ]//g;')
        pool_start=$(echo "${ikev2_data}" | grep pool-start | cut -d':' -f2 | sed 's/[\,\" ]//g;')
        multi_login=$(echo "${ikev2_data}" | grep multi-login | cut -d':' -f2 | sed 's/[\,\" ]//g;')
        sa_compat=$(echo "${ikev2_data}" | grep sa-compat | cut -d':' -f2 | sed 's/[\,\" ]//g;')
		ikev2_dns=$(get_router_ip)
		curl -s -d '{"enable": '"${enable}"', "nat": true, "dns-server": "'"${ikev2_dns}"'", "pool-size": "'"${pool_size}"'", "pool-start": "'"${pool_start}"'", "multi-login": "'"${multi_login}"'", "sa-compat": "'"${sa_compat}"'"}' \
			"${LOCALHOST_IP}:79/rci/crypto/virtual-ip-server-ikev2" &> /dev/null
		sleep 1
	fi

}




ikev2_net_access_add(){
#set -x

	ikev2=$(curl -s "${LOCALHOST_IP}:79/rci/crypto/virtual-ip-server-ikev2")
	net_pool=$(echo "${ikev2}" | grep pool-start | cut -d':' -f2 | sed 's/[\,\" ]//g;')

	ikev2_setup "${ikev2}"

	ready "Добавление гостевого интерфейса \"VPN-сервер IKEv2\" [${net_pool}] завершено" && {

		net_ip=$(echo "${net_pool}" | sed 's/\.[0-9]\{1,3\}$/.1/')
		net_pool=$(echo "${net_pool}" | sed 's/\.[0-9]\{1,3\}$/.0\/24/')

		if has_ssr_enable ;then
			if iptab -t nat -L "${PROXY_IPTABLES_CHAIN}" -n &>/dev/null; then	
				ip4_add_selected_guest_to_ssr_network ikev2 "${net_pool}"
			fi	
			add_ikev2_net_to_config
		else
			ikev2_inface=$(get_entware_ikev2_inface)
			if ! iptab_save | grep POSTROUTING | grep "${net_pool}" | grep "${ikev2_inface}" | grep -q MASQUERADE ; then
				iptab -A POSTROUTING -t nat -s "${net_pool}" -o "${ikev2_inface}" -j MASQUERADE
				add_ikev2_net_to_config
			fi
		fi

	} && when_alert "УСПЕШНО" || when_bad "С ОШИБКОЙ"

#set +x
}



# ------------------------------------------------------------------------------------------
#
# Удаляем все правила iptables для SHADOWSOCKS подключений,
# которые были добавлены при работе пакета в старой редакции
#
# ------------------------------------------------------------------------------------------
# для одного гостевого интерфейса
ip4_firewall_rm_ssr_selected_guest_net(){
	guest_inface="${1}"
	iptab -t nat -A PREROUTING -i "${guest_inface}" -m set --match-set ${IPSET_TABLE_NAME} dst -j "${PROXY_IPTABLES_CHAIN}"
}



# для всех гостевых интерфейсов
ip4_firewall_flush_ssr_guest_rules(){
	for guest_inface in $(get_guest_inface_list_from_config)
	do
		ip4_firewall_rm_ssr_selected_guest_net "${guest_inface}" &>/dev/null
	done
}


# ------------------------------------------------------------------------------------------
#
# 	Удаляем все правила iptables которые были добавлены при работе пакета
#
# ------------------------------------------------------------------------------------------


# для всех гостевых интерфейсов
ip4_firewall_flush_vpn_rules() {
#		Если программное и аппаратное ускорение ПОДКЛЮЧЕНО
		ip4_firewall_fastnet_vpn_prune &>/dev/null


	for guest_inface in $(get_guest_inface_list_from_config)
	do
		ip4_firewall_flush_ssr_guest_rules &>/dev/null;
	done
}
# ------------------------------------------------------------------------------------------
#
# 	Удаляем все правила iptables которые были добавлены при работе пакета
#
# ------------------------------------------------------------------------------------------
ip4_firewall_flush_all_rules(){

#   Если активно VPN соединение
	if has_ssr_enable; then
#		Если активно SHADOWSOCKS соединение
		ip4_firewall_ssr_prune &>/dev/null

	else
		ip4_firewall_flush_vpn_rules &>/dev/null
	fi

}

# ------------------------------------------------------------------------------------------
#
# 	Удаляем все таблицы которые были созданы при работе пакета
#
# ------------------------------------------------------------------------------------------
ip4_flush_all_tables(){

	log_warning "IPset::Производим очистку записей таблицы ${IPSET_TABLE_NAME}."
	ipset flush "${IPSET_TABLE_NAME}"  &>/dev/null
#	when_error "${?}" " ${IPv4} Возникла ошибка при очистке записей ipset таблицы ${IPSET_TABLE_NAME}"

	ip4__route__del_route_table &>/dev/null
#	when_error "${?}" " ${IPv4} Возникла ошибка при очистке таблицы маршрутизации ID#${ROUTE_TABLE_ID}"
	ip4__route__flush_cache &>/dev/null
}


route_del(){
	inface_ent=${1}
	#_route=$(ip route show table ${ROUTE_TABLE_ID})
	#inface=$(echo ${_route} | grep default | cut -d' ' -f5)
	old_if=$(ip route show table "${ROUTE_TABLE_ID}" | awk '/^default / {for (i=1; i<NF; i++) if ($i=="dev") print $(i+1); exit}')
	if [[ -n "${old_if}" ]] && [[ "${old_if}" != "${inface_ent}" ]]; then
		ip route del table ${ROUTE_TABLE_ID} default dev ${old_if}
		#ip route del table ${ROUTE_TABLE_ID} default via "$(inface_gw4)" dev $(inface_ent) &>/dev/null
	fi

}
# ------------------------------------------------------------------------------------------
#
# 	Создаем ip таблицу ${ROUTE_TABLE_ID} и копируем в нее данные из таблицы main
#
# ------------------------------------------------------------------------------------------
ip4_add_route_table() {
	_inface_ent=$(get_config_value "INFACE_ENT")
	_inface_cli=$(get_config_value "INFACE_CLI")

	local mess
	mess="Создаем таблицу маршрутизации ID#${ROUTE_TABLE_ID} для '${_inface_ent}' ('${_inface_cli}')."
	log_warning "${mess}"
	ready "${mess}"

	{
		local _old_if
		# получаем имя старого интерфейса, чтобы проверить, не изменился ли он
		_old_if=$(ip route show table "${ROUTE_TABLE_ID}" | awk '/^default / {for (i=1; i<NF; i++) if ($i=="dev") print $(i+1); exit}')

		if [[ -n "${_old_if}" ]] && [[ "${_old_if}" != "${_inface_ent}" ]]; then
			# интерфейс меняется — скорее всего, мы переключились на другой маршрут
			# необходимо удалить зависшие маршруты в conntrack
			conntrack -D --mark "${MARK_NUM}"
		fi

		local _ip_output
		_ip_output=$(ip a show "${_inface_ent}")

		if echo "$_ip_output" | grep -q "POINTOPOINT"; then
			# POINTOPOINT — маршрут без шлюза
			if ! ip route replace table "${ROUTE_TABLE_ID}" default dev "${_inface_ent}" 2>/dev/null; then
				error "[${FUNCNAME}] Ошибка при создании таблицы маршрутизации ID#${ROUTE_TABLE_ID} (POINTOPOINT) для '${_inface_cli}'"
				exit 1
			fi
		else
			local _inface_ent_via
			_inface_ent_via=$(get_config_value "INFACE_ENT_VIA")

			if [ -z "$_inface_ent_via" ]; then
				error "[${FUNCNAME}] IP-адрес шлюза для интерфейса '${_inface_ent}' не задан (INFACE_ENT_VIA). Либо выбран не верный интерфейс."
				exit 1
			fi

			if ! ip route replace table "${ROUTE_TABLE_ID}" default via "${_inface_ent_via}" dev "${_inface_ent}" 2>/dev/null; then
				error "[${FUNCNAME}] Ошибка при создании таблицы маршрутизации ID#${ROUTE_TABLE_ID} для '${_inface_cli}'"
				exit 1
			fi

			# Пробуем добавить маршрут до сети шлюза (например, /24)
			local _net
			_net="$(echo "${_inface_ent_via}" | cut -d'.' -f1-3).0/24"


			if ! ip route add "${_net}" via "${_inface_ent_via}" dev "${_inface_ent}" table "${ROUTE_TABLE_ID}" 2>/dev/null; then
    			log_warning "[${FUNCNAME}] Маршрут ${_net} уже существует или не добавлен — это не критично"
			fi
		fi

	} && when_ok "УСПЕШНО" || when_bad "С ОШИБКАМИ"
}

# ------------------------------------------------------------------------------------------
#
# 	Устанавливаем приоритет таблицы ID#${ROUTE_TABLE_ID} в значение ${PRIORITY}
#
# ------------------------------------------------------------------------------------------
ip4_rule_set_priority(){

	ip4__route__add_rule 

	ip4__route__flush_cache &>/dev/null
}


# ------------------------------------------------------------------------------------------
#
# 	Обнуляем приоритет таблицы ID#${ROUTE_TABLE_ID}
#
# ------------------------------------------------------------------------------------------





# ------------------------------------------------------------------------------------------
#
# 	Пересоздаем все ранее созданные таблицы для утилит ipset и ip
#
# ------------------------------------------------------------------------------------------
recreate_ip4tables(){

	ready "${prefix}Удаляем все ранее созданные таблицы для утилит ipset и ip"
	ip4_flush_all_tables &>/dev/null && when_ok "УСПЕШНО" || when_bad "ОШИБКА"

	ready "${prefix}Создаем все необходимые таблицы для утилит ipset и ip"
	ip4__route__ipset_create_table &>/dev/null && when_ok "УСПЕШНО" || when_bad "ОШИБКА"

#	ready "${prefix}Создаем таблицу маршрутизации ID#${ROUTE_TABLE_ID} для '$(inface_cli)'."
#	#	Создаем таблицу IP адресов для  VPN подключения отличного от shadowsocks
#	ip4_add_route_table &> /dev/null
#	[ $? = 0 ] && when_ok "УСПЕШНО" || when_bad "ОШИБКА"
}


# ------------------------------------------------------------------------------------------
#
# 	Пересоздаем все необходимые правила для корректной работы VPN соединения
#
# ------------------------------------------------------------------------------------------
recreate_vpn_rules(){

	if has_ssr_enable ; then
	#TODO Это тут нафига?
		ready "${prefix}Очищаем все ранее созданные iptables правила для SHADOWSOCKS."
		ip4_firewall_ssr_prune  &>/dev/null && when_ok "УСПЕШНО" || when_bad "ОШИБКА"
	else
		ready "${prefix}Очищаем все ранее созданные iptables правила для VPN."
		ip4_firewall_flush_all_rules  &>/dev/null
		when_ok "УСПЕШНО"

		ready "${prefix}Создаем iptables правила для VPN соединения."
		#Создаем правила iptables
		ip4_vpn_insert_firewall &> /dev/null && when_ok "УСПЕШНО" || when_bad "ОШИБКА"
	fi
}

# ------------------------------------------------------------------------------------------
#
# 	Пересоздаем все необходимые правила для корректной работы SHADOWSOCKS соединения
#
# ------------------------------------------------------------------------------------------
recreate_ssr_rules(){
	ready "${prefix}Очищаем все ранее созданные iptables правила для SHADOWSOCKS"
#		Если активно SHADOWSOCKS соединение
	ip4_firewall_ssr_prune &>/dev/null && when_ok "УСПЕШНО" || when_bad "ОШИБКА"

	ready "${prefix}Создаем iptables правила для SHADOWSOCKS соединения."
	ip4_proxy_insert_nat &> /dev/null && when_ok "УСПЕШНО" || when_bad "ОШИБКА"
}

# ------------------------------------------------------------------------------------------
#
# 	Пересоздаем таблицу ipset для AdGuard Home и перезапускаем сервис
#
# ------------------------------------------------------------------------------------------
refresh_adguard_ipset_table(){
	ready "${prefix}Заполняем AdGuard таблицу данными из защищенного списка."
	/opt/apps/kvas/bin/main/adguard &>/dev/null && when_ok "УСПЕШНО" || when_bad "ОШИБКА"
}


# ------------------------------------------------------------------------------------------
#
# Функции для поддержки протокола ip6
#
# ------------------------------------------------------------------------------------------
ip6() (/opt/sbin/ip -6 "$@")
ip6tables() (if ! /opt/sbin/ip6tables -C "$@" &>/dev/null; then ip6tables -A "$@"; fi)
ip6save() (/opt/sbin/ip6tables-save)

ip6set_create_table(){
	ipset create "${IPSET_TABLE_NAME}6" hash:net family inet6 -exist timeout 3600 &>/dev/null \
	 || {
			_err="${IPv6}Возникла ошибка при создании таблицы с именем '${IPSET_TABLE_NAME}' для ipset"
			error "[${FUNCNAME}] ${_err}"
		}
}

