#!/bin/sh
# shellcheck source=opt\bin\libs\main
. /opt/apps/kvas/bin/libs/main

ENTWARE_INTERFACE="$(get_config_value INFACE_ENT)"
CLI_INTERFACE="$(get_config_value INFACE_CLI)"

reset_logger(){
        logger -t "КВАС"  "Осуществляем перезапуск ${CLI_INTERFACE}::${ENTWARE_INTERFACE}"
}


restart_ssr_connection(){
        reset_logger
        /opt/etc/init.d/S22shadowsocks restart &>/dev/null
}
restart_vpn_connection(){

        cli_request="localhost:79/rci/interface/${CLI_INTERFACE}"
        reset_logger
        curl -s -d '{"down":"true"}' "${cli_request}"
        sleep 1
        curl -s -d '{"up":"true"}' "${cli_request}"
}

# get_host_ip(){
#         # Удаляем из имени хоста все звездочки (*) в выражениях *domain.com
#         # и символы косой четы и все что после нее в выражения XX.XX.XX.XX/10,
#         # получая на выходе XX.XX.XX.XX
#         host="${1//\*}"; dns="${2}"; host="${host///*}";
#         nslookup  "${host}" "${dns}" \
#                 | sed -n '/Name/,/Address/ p' \
#                 | grep Address \
#                 | cut -d: -f2 \
#                 | cut -d' ' -f2\
#                 | grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'
# }

# get_ip_from_kvas(){
#         ub_tag=kvas
#         num=0; ip=''
#         dns=$(get_config_value DNS_DEFAULT | cut -d'#' -f1)
#         while read -r host || [ -n "${host}" ]; do
#                 ip=$(get_host_ip "${host}" "${dns}")
#                 if [ -n "${ip}" ]; then
#                         if ipset list "${ub_tag}" | grep -q "${ip}" || \
#                            ([ -f /opt/etc/AdGuardHome/AdGuardHome.yaml ] && grep -q "${host}/${ub_tag}" /opt/etc/AdGuardHome/AdGuardHome.yaml) ; then
#                                 break
#                         fi
#                 fi
#         done < "${KVAS_LIST_FILE}"
#         echo "${ip}"
# }

# test_ip(){
#     ip="$1"
#     if ! ping -I "${ENTWARE_INTERFACE}" -c 3 -W 2 "${ip}" &>/dev/null; then
#        # restart_vpn_connection
#     fi
#     # -c 3 — отправить три пакета;
#     # -W 2 — подождать до 2 секунд ответа на каждый;
# }

test_connection(){

        if echo "${ENTWARE_INTERFACE}" | grep -q "${SSR_ENTWARE_TEMPL}" ; then
        	ssr_ip=$(cat < "${SHADOWSOCKS_CONF}" | grep '"server"'| sed 's/.*:.*"\(.*\)".*/\1/')
        	# если пинг на сервер ssr не проходит или статус сервиса отличен от alive, то перезапускаем сервис ssr
            if ! ping -c1 "${ssr_ip}" >/dev/null || /opt/etc/init.d/S22shadowsocks status | grep -vq alive ; then
                        restart_ssr_connection
            fi
        else
#              если соединение отлично от ssr и его состояния: state и link отличны от up,
#              а состояние флага connected отлично от состояния yes, то vpn соединение перезапускаем

                if curl -sf "http://localhost:79/rci/show/interface/${CLI_INTERFACE}" | grep -q .; then
                        # Интерфейс существует, проверяем его состояние
                        if curl -s "http://localhost:79/rci/show/interface/${CLI_INTERFACE}" \
                                | jq -r 'select(.state=="up" and .link=="up") | .connected' \
                                | grep -qv 'yes'; then
                                        restart_vpn_connection
                        fi
                else
                        # интерфейс нестандартный, поэтому отслеживать состояние и перезагружать должен именно тот модуль кто создал этот интерфейс
                        # Интерфейс отсутствует — проверяем доступность IP через VPN
                        #test_ip "8.8.8.8"
                        
                fi


        fi


}

test_connection &
