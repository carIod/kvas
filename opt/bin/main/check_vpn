#!/bin/sh

EQUALS_INTERFACE_FILE=/opt/etc/inface_equals


get_config_value(){
        grep "${1}" /opt/etc/kvas.conf | cut -d'=' -f2
}
get_current_entware_vpn_interface() {
        inface_entware=$(get_config_value INFACE_ENT)
        inface=$(grep "${inface_entware}" "${EQUALS_INTERFACE_FILE}" | cut -d'|' -f2)
        echo "${inface}"
}

get_current_cli_vpn_interface() {
        inface_entware=$(get_config_value INFACE_ENT)
        inface=$(grep "${inface_entware}" "${EQUALS_INTERFACE_FILE}"  | cut -d'|' -f1)
        echo "${inface}"
}

ENTWARE_INTERFACE=$(get_current_entware_vpn_interface)
CLI_INTERFACE=$(get_current_cli_vpn_interface)

reset_logger(){
        logger -t "КВАС"  "Осуществляем перезапуск ${CLI_INTERFACE}::${ENTWARE_INTERFACE}"
}


restart_ssr_connection(){
        reset_logger
        /opt/etc/init.d/S22shadowsocks restart &>/dev/null
}
restart_vpn_connection(){

        cli_request="localhost:79/rci/interface/${CLI_INTERFACE}"
        reset_logger
        curl -s -d '{"down":"true"}' "${cli_request}"
        sleep 1
        curl -s -d '{"up":"true"}' "${cli_request}"
}

get_host_ip(){
        # Удаляем из имени хоста все звездочки (*) в выражениях *domain.com
        # и символы косой четы и все что после нее в выражения XX.XX.XX.XX/10,
        # получая на выходе XX.XX.XX.XX
        host="${1//\*}"; dns="${2}"; host="${host///*}";
        nslookup  "${host}" "${dns}" \
                | sed -n '/Name/,/Address/ p' \
                | grep Address \
                | cut -d: -f2 \
                | cut -d' ' -f2\
                | grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'
}

get_ip_from_unblock(){
        ub_tag=unblock
        host_list=/opt/etc/hosts.list
        num=0; ip=''
        dns=$(get_config_value DNS_DEFAULT | cut -d'#' -f1)
        while read -r host || [ -n "${host}" ]; do
                ip=$(get_host_ip "${host}" "${dns}")
                if [ -n "${ip}" ]; then
                        if ipset list "${ub_tag}" | grep -q "${ip}" || \
                           ([ -f /opt/etc/AdGuardHome/AdGuardHome.yaml ] && grep -q "${host}/${ub_tag}" /opt/etc/AdGuardHome/AdGuardHome.yaml) ; then
                                break
                        fi
                fi
        done < "${host_list}"
        echo "${ip}"
}

test_ip(){

        ip="${1}"
        ping -I "${ENTWARE_INTERFACE}" "${ip}" -i 10 &>/dev/null || {
                restart_vpn_connection
        }
}

test_connection(){

        if echo "${ENTWARE_INTERFACE}" | grep -q ezcfg ; then
        	ssr_ip=$(cat < /opt/etc/shadowsocks.json.kvas | grep '"server"'| sed 's/.*:.*"\(.*\)".*/\1/')
        	# если пинг на сервер ssr не проходит или статус сервиса отличен от alive, то перезапускаем сервис ssr
            if ! ping -c1 -A | "${ssr_ip}" | grep -q 'seq=' || /opt/etc/init.d/S22shadowsocks status | grep -vq alive ; then
                        reset_ssr_connection
            fi
        else
#        	если соединение отлично от ssr и его состояния: state и link отличны от up,
#        	а состояние флага connected отлично от состояния yes, то vpn соединение перезапускаем
			if curl -s "http://localhost:79/rci/show/interface" | jq -r '.[] | select(.id=="'"${CLI_INTERFACE}"'" and .state=="up" and .link=="up") | .connected' | grep -qv 'yes' ; then
					reset_vpn_connection
			fi

#			После проверки работоспособности кода выше этот код и участвующие в нем функции выше удалить!!!
			#ip_to_test=$(get_ip_from_unblock)
			#for i in {0..3}
			#do
			#       ps w | grep -v grep | grep -q "ping -I ${ENTWARE_INTERFACE} ${ip_to_test}" ||  ping_ip "${ip_to_test}"
			#done
        fi


}

test_connection &
