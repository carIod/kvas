#!/bin/sh
#------------------------------------------------------------------------------
#	ПАКЕТ КВАС
#------------------------------------------------------------------------------
#
#	Данный файл служит библиотекой переменых среды и функций,
#	которые используются в событийном пакете ndm
#	https://github.com/ndmsystems/packages/wiki/Opkg-Component
#
# ------------------------------------------------------------------------------
#	Разработчик: mail@zeleza.ru
#	Дата создания: 13/09/2022
#	Лицензия: GPL 2.0
# ------------------------------------------------------------------------------------------
app="КВАС"
# имя таблицы для ipset
table_name=unblock

TABLE_ID=1001
PRIORITY=1778

INFACE_CLI=@CLI_INFACE_NAME
INFACE_ENT=@ENTWARE_INFACE_NAME
#как пример гостевая сеть br3, которой необходимо обеспечить доступ к VPN
INFACE_GUEST_ENT=

ip4() (/opt/sbin/ip -4 "$@")
ip4tables() (if ! /opt/sbin/iptables -C "$@" &>/dev/null; then iptables -A "$@"; fi)
ip4save() (/opt/sbin/iptables-save)
get_gw4()(ip4 addr show "${1}" | grep -Po "(?<=inet ).*(?=/)")

INFACE_GW4=$(get_gw4 "${INFACE_ENT}")
INFACE_GUEST_GW4=$([ -n "${INFACE_GUEST_ENT}" ] && get_gw4 "${INFACE_GUEST_ENT}")
GUEST_NET="$([ -n "${INFACE_GUEST_ENT}" ] && echo "${INFACE_GUEST_GW4}" | cut -d'.' -f1-3).0/24"

# проверка на доступность программного и аппаратного ускорения
fastnet_support()(curl -s localhost:79/rci/show/version | grep -q ppe)
fast_hw_enabled()(! curl -s localhost:79/rci/show/rc/ppe | grep hardware -C1 | grep -q false)
fast_sw_enabled()(! curl -s localhost:79/rci/show/rc/ppe | grep software -C1 | grep -q false)
fastnet_enabled()(fast_hw_enabled || fast_sw_enabled)

ip4_firewall_mark_vpn(){
#		Маркируем трафик для домашней(основной) сети и прохождение пакетов через VPN подключение
	ip4tables PREROUTING -t mangle -m conntrack --ctstate NEW -m set --match-set "${table_name}" dst -j CONNMARK --set-mark 0xd1000
	ip4tables PREROUTING -t mangle -j CONNMARK --restore-mark
	logger "${app}::Маркировка трафика подключена при подключенном программном и аппаратном ускорении."
}

ip4_firewall_mark_rules_tcp_udp_on(){
	# Исключаем маркировку трафика для гостевой (в том числе) сети
	ip4tables PREROUTING -t mangle -i "${INFACE_GUEST_ENT}" -p tcp -m set --match-set ${table_name} dst -j MARK --set-mark 0xd1000
	ip4tables PREROUTING -t mangle -i "${INFACE_GUEST_ENT}" -p udp -m set --match-set ${table_name} dst -j MARK --set-mark 0xd1000
	logger "${app}::Маркировка трафика гостевой сети для tcp и udp ВКЛЮЧЕНА при ОТКлюченном программном и аппаратном ускорении."
}

ip4_firewall_set_ssr_rules(){
	inface="${1}"
	proxy_port="${2}"
	ip4tables -w -t nat PREROUTING -i ${inface} -p tcp -m set --match-set "${table_name}" dst -j REDIRECT --to-port ${proxy_port}
}

ip4_firewall_flush_vpn_rules(){
	num_lines=$(ip4tables -t mangle -L PREROUTING --line-numbers | grep CONNMARK | grep -cE "(${table_name}|restore-mark)")
	for b in $(seq 1 ${num_lines}); do
		nline=$(ip4tables -t mangle -L PREROUTING --line-numbers \
				| grep CONNMARK \
				| grep -E "(${table_name}|restore-mark)" \
				| cut -d" " -f1 \
				| head -1 \
				)
		/opt/sbin/iptables -t mangle -D PREROUTING "${nline}"
	done
}

ip4_firewall_flush_ssr_rules(){
	num_lines=$(ip4tables -t nat -L PREROUTING --line-numbers | grep -c "${table_name}")
	for b in $(seq 1 ${num_lines}); do
		nline=$(ip4tables -t nat -L PREROUTING --line-numbers \
				| grep unblock \
				| cut -d" " -f1 \
				| head -1\
				)
		/opt/sbin/iptables -t nat -D PREROUTING "${nline}"
	done
}

ip4_add_route_table(){
	logger "${app}::Поднимаем ${INFACE_CLI} интерфейс"
	ip4 route add table ${TABLE_ID} default via ${INFACE_GW4} dev ${INFACE_ENT} 2>/dev/null
	ip4 route show table main |grep -Ev ^default | while read -r ROUTE; do ip4 route add table ${TABLE_ID} ${ROUTE} 2>/dev/null; done
	logger "${app}::Таблица ID#${TABLE_ID} создана"
}

ip4_rule_set_priority(){
	logger "${app}::Устанавливаем приоритет таблицы ID#${TABLE_ID} в значение ${PRIORITY}"
	ip4 rule add fwmark 0xd1000 lookup ${TABLE_ID} priority ${PRIORITY} 2>/dev/null
	ip4 route flush cache
	logger "${app}::DNS кэш очищен."
}

ipset4_create_table(){
	ipset create ${table_name} hash:net family inet -exist
	logger "${app}::Таблица ${table_name} для ipset IPv4 создана"
}

ip4_mark_vpn_network(){

	if fastnet_enabled ; then
		ip4save | grep "\-j CONNMARK" | grep -qE "mark|${table_name}" || {
			# Без отключения ускорителей fastnat и hwnat
			logger "${app}::Программное и аппаратное ускорение ПОДКЛЮЧЕНО."
			ip4_firewall_mark_vpn
		}
	else
		ip4save | grep "\j MARK" | grep -q "${table_name}" || {
			# С отключением fastnat и ускорителей hwnat
			logger "${app}::Программное и аппаратное ускорение ОТКЛЮЧЕНО!"
			ip4_firewall_mark_rules_tcp_udp_on
		}
	fi
#	в случае наличия гостевой сети
	if [ -n "${INFACE_GUEST_ENT}" ]; then
		# Маркируем трафик гостевой сети
		ip4tables PREROUTING -t nat -p udp -d "${INFACE_GUEST_GW4}" --dport 53 -j DNAT --to "${INFACE_GW4}:53"
		ip4tables POSTROUTING -t nat -s "${GUEST_NET}" -o "${INFACE_GUEST_ENT}" -j MASQUERADE
		logger "${app}::Маркировка гостевого трафика подключена ${INFACE_GUEST_ENT} [${INFACE_GUEST_GW4}]."
	fi
}

#----------------------------------------------------------------
#
# Функции для поддержки протокола ip6
#
#----------------------------------------------------------------
ip6() (/opt/sbin/ip -6 "$@")
ip6tables() (if ! /opt/sbin/ip6tables -C "$@" &>/dev/null; then ip6tables -A "$@"; fi)
ip6save() (/opt/sbin/ip6tables-save)

ipset6_create_table(){
	ipset create "${table_name}6" hash:net family inet6 -exist
	logger "${app}::Таблица ${table_name} для ipset IPv6 создана"
}


