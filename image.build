#! /usr/bin/env bash
. ./build/library.run

DEBUG=YES										# флаг отладки процесса сборки образа
env_file=.env
#------------------------------------------------------------
user=$(get_remove_value "USER_NAME")
group=$(get_remove_value "USER_GROUP")
image_name=$(get_remove_value "IMAGE_NAME")
# ------------------------------------------------------------
#	Записываем данные в файл .env для docker-compose
# ------------------------------------------------------------
cat <<EOF > "${env_file}"
APP_NAME=${APP_NAME}
APPS_ROOT=$(get_remove_value "APPS_ROOT")
APP_PATH_NAME_TO_MAKE=$(get_remove_value "APP_PATH_NAME_TO_MAKE")
IMAGE_NAME=${image_name}
CONTAINER_NAME=$(get_remove_value "CONTAINER_NAME")
USER=${user}
GROUP=${group}
UID=$(get_remove_value "U_ID")
GID=$(get_remove_value "G_ID")
DEBUG=${DEBUG}
EOF

# удаляем старые контейнеры
docker container prune -f

if [ "${1}" = build ] || [ -z "$(docker ps -a -f 'status=running' | grep "${APP_NAME}")" ]; then
#	то заходим внутрь контейнера и сразу запускаем сборку пакета
#	если не создан образ, то запускаем сборку образа
	show_line; echo "Запускаем сборку образа ${image_name}"
	show_line
	docker-compose up --build -d
fi

if [ "${?}" = 0 ]; then
	show_line; echo "Docker-образ собран без ошибок."
	echo "Запускаем сборку пакета в самом контейнере..."
	id_dc=$(docker ps -aq -f ancestor="${image_name}")
	docker exec --user "${user}:${group}" -it "${id_dc}" \
			"${APPS_ROOT}/${APP_NAME}/build/package.build" \
			/bin/bash
else
	show_line; echo "Docker-образ собран с ошибками!"
	exit 1
fi
show_line
