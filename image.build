#! /usr/bin/env bash
set -e

. ./build/library.run
rm .env
put()(echo "${1}" >> .env)

#------------------------------------------------------------
DEBUG=NO
image_name="kvas_develop"
user=$(cat /apps/kvas/debug/remote.conf | grep "USER_NAME=" | cut -d'=' -f2)
group=$(cat /apps/kvas/debug/remote.conf | grep "USER_GROUP=" | cut -d'=' -f2)
user_uid=$(cat /apps/kvas/debug/remote.conf | grep "U_ID=" | cut -d'=' -f2)
user_gid=$(cat /apps/kvas/debug/remote.conf | grep "G_ID=" | cut -d'=' -f2)
# ------------------------------------------------------------

put "IMAGE_NAME=${image_name}"
put "NAME=${user}"
put "GROUP=${group}"
put "UID=${user_uid}"
put "GID=${user_gid}"
put "TZ=Europe/Moscow"
put "VERSION=${version}.${stage}.${release}"
put "DEBUG=${DEBUG}"

# Если уже создан образ kvas_develop
docker container prune -f
if [ "${1}" = build ] || [ ! docker ps -a -f 'status=running' | grep -q kvas ]; then
#	то заходим внуть контейнера kvas_develop и сразу запускаем соборку пакета
#	если не создан образ, то запускаем сборку образа
	docker-compose up --build -d
fi
# Запускаем контейнер и сразу запускаем сборку пакета в самом контейнере
docker run \
		--user "${user_uid}:${user_gid}" -it \
		--mount type=bind,src=/apps/kvas,dst=/apps/kvas ${image_name} \
		/apps/kvas/build/package.build \
		/bin/bash
#docker run --user 5001:5001 -it --mount type=bind,src=/apps/kvas,dst=/apps/kvas kvas_develop /bin/bash